// Code generated from antlr/SimplifiedCql.g4 by ANTLR 4.9.3. DO NOT EDIT.

package parser // SimplifiedCql

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 110, 861,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 3,
	2, 3, 2, 5, 2, 143, 10, 2, 3, 2, 3, 2, 5, 2, 147, 10, 2, 3, 2, 3, 2, 5,
	2, 151, 10, 2, 3, 2, 3, 2, 5, 2, 155, 10, 2, 3, 2, 3, 2, 5, 2, 159, 10,
	2, 3, 2, 3, 2, 5, 2, 163, 10, 2, 3, 2, 3, 2, 5, 2, 167, 10, 2, 5, 2, 169,
	10, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 3, 184, 10, 3, 3, 3, 5, 3, 187, 10, 3, 3, 4, 3, 4, 3, 4,
	5, 4, 192, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 200, 10, 4,
	5, 4, 202, 10, 4, 3, 5, 3, 5, 3, 5, 7, 5, 207, 10, 5, 12, 5, 14, 5, 210,
	11, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 217, 10, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 242, 10, 6, 3, 7,
	3, 7, 5, 7, 246, 10, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 252, 10, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 5, 7, 258, 10, 7, 5, 7, 260, 10, 7, 3, 8, 3, 8, 3, 8,
	7, 8, 265, 10, 8, 12, 8, 14, 8, 268, 11, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3,
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 280, 10, 9, 3, 10, 3, 10, 5, 10,
	284, 10, 10, 3, 10, 3, 10, 5, 10, 288, 10, 10, 3, 10, 3, 10, 5, 10, 292,
	10, 10, 7, 10, 294, 10, 10, 12, 10, 14, 10, 297, 11, 10, 3, 10, 3, 10,
	3, 10, 3, 11, 3, 11, 3, 11, 5, 11, 305, 10, 11, 3, 12, 3, 12, 5, 12, 309,
	10, 12, 3, 12, 5, 12, 312, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 318,
	10, 12, 3, 12, 5, 12, 321, 10, 12, 3, 12, 5, 12, 324, 10, 12, 3, 12, 5,
	12, 327, 10, 12, 3, 12, 5, 12, 330, 10, 12, 3, 12, 3, 12, 5, 12, 334, 10,
	12, 3, 13, 3, 13, 5, 13, 338, 10, 13, 3, 14, 3, 14, 3, 14, 7, 14, 343,
	10, 14, 12, 14, 14, 14, 346, 11, 14, 3, 15, 3, 15, 3, 15, 5, 15, 351, 10,
	15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16,
	3, 16, 3, 16, 3, 16, 5, 16, 366, 10, 16, 3, 17, 3, 17, 3, 17, 3, 18, 3,
	18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 19, 7, 19, 378, 10, 19, 12, 19, 14,
	19, 381, 11, 19, 3, 20, 3, 20, 5, 20, 385, 10, 20, 3, 21, 3, 21, 3, 21,
	3, 21, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 5, 22, 396, 10, 22, 3, 23, 3,
	23, 3, 23, 5, 23, 401, 10, 23, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 417, 10,
	24, 3, 25, 3, 25, 3, 25, 5, 25, 422, 10, 25, 3, 26, 3, 26, 3, 26, 5, 26,
	427, 10, 26, 3, 27, 3, 27, 3, 27, 7, 27, 432, 10, 27, 12, 27, 14, 27, 435,
	11, 27, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 5, 28,
	445, 10, 28, 3, 28, 3, 28, 5, 28, 449, 10, 28, 3, 28, 3, 28, 3, 28, 3,
	28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28,
	5, 28, 465, 10, 28, 3, 28, 3, 28, 5, 28, 469, 10, 28, 3, 28, 3, 28, 3,
	28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 5, 28,
	483, 10, 28, 3, 28, 3, 28, 5, 28, 487, 10, 28, 5, 28, 489, 10, 28, 3, 29,
	3, 29, 3, 29, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 500, 10,
	30, 3, 30, 3, 30, 3, 30, 3, 30, 7, 30, 506, 10, 30, 12, 30, 14, 30, 509,
	11, 30, 3, 31, 3, 31, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3,
	32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 5, 32, 536, 10, 32, 3, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3,
	32, 5, 32, 551, 10, 32, 3, 32, 3, 32, 5, 32, 555, 10, 32, 3, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3,
	32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3,
	32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 5, 32, 610,
	10, 32, 3, 33, 3, 33, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 5, 34, 619, 10,
	34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 5, 35, 629,
	10, 35, 3, 35, 3, 35, 5, 35, 633, 10, 35, 3, 35, 5, 35, 636, 10, 35, 3,
	36, 3, 36, 3, 36, 5, 36, 641, 10, 36, 3, 37, 3, 37, 5, 37, 645, 10, 37,
	3, 37, 3, 37, 3, 38, 3, 38, 5, 38, 651, 10, 38, 3, 38, 3, 38, 3, 39, 3,
	39, 5, 39, 657, 10, 39, 3, 39, 3, 39, 3, 40, 3, 40, 3, 40, 7, 40, 664,
	10, 40, 12, 40, 14, 40, 667, 11, 40, 3, 41, 3, 41, 3, 41, 3, 41, 3, 42,
	3, 42, 3, 42, 7, 42, 676, 10, 42, 12, 42, 14, 42, 679, 11, 42, 3, 43, 3,
	43, 3, 43, 3, 43, 3, 44, 3, 44, 3, 44, 3, 44, 3, 45, 3, 45, 3, 45, 7, 45,
	692, 10, 45, 12, 45, 14, 45, 695, 11, 45, 3, 46, 3, 46, 3, 46, 3, 46, 3,
	47, 3, 47, 3, 47, 5, 47, 704, 10, 47, 3, 47, 3, 47, 3, 48, 3, 48, 3, 48,
	7, 48, 711, 10, 48, 12, 48, 14, 48, 714, 11, 48, 3, 49, 3, 49, 5, 49, 718,
	10, 49, 3, 50, 3, 50, 3, 50, 7, 50, 723, 10, 50, 12, 50, 14, 50, 726, 11,
	50, 3, 51, 3, 51, 5, 51, 730, 10, 51, 3, 52, 3, 52, 3, 53, 3, 53, 3, 53,
	3, 54, 3, 54, 3, 54, 7, 54, 740, 10, 54, 12, 54, 14, 54, 743, 11, 54, 3,
	55, 3, 55, 3, 55, 3, 55, 5, 55, 749, 10, 55, 3, 56, 3, 56, 3, 56, 3, 56,
	3, 56, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 5,
	57, 765, 10, 57, 3, 58, 3, 58, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59,
	3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3,
	59, 5, 59, 786, 10, 59, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 7, 60, 793,
	10, 60, 12, 60, 14, 60, 796, 11, 60, 3, 60, 3, 60, 3, 61, 3, 61, 3, 62,
	3, 62, 3, 63, 3, 63, 3, 64, 3, 64, 3, 65, 3, 65, 3, 65, 5, 65, 811, 10,
	65, 3, 65, 3, 65, 3, 66, 3, 66, 3, 66, 7, 66, 818, 10, 66, 12, 66, 14,
	66, 821, 11, 66, 3, 67, 3, 67, 3, 67, 5, 67, 826, 10, 67, 3, 68, 3, 68,
	3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3,
	68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68,
	5, 68, 851, 10, 68, 3, 69, 7, 69, 854, 10, 69, 12, 69, 14, 69, 857, 11,
	69, 3, 70, 3, 70, 3, 70, 2, 3, 58, 71, 2, 4, 6, 8, 10, 12, 14, 16, 18,
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54,
	56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90,
	92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120,
	122, 124, 126, 128, 130, 132, 134, 136, 138, 2, 9, 3, 2, 7, 8, 3, 2, 9,
	10, 4, 2, 38, 38, 86, 86, 4, 2, 26, 26, 43, 43, 4, 2, 24, 24, 70, 70, 4,
	2, 6, 6, 15, 20, 13, 2, 28, 28, 31, 33, 38, 38, 40, 41, 45, 46, 49, 49,
	54, 54, 58, 58, 76, 81, 90, 90, 92, 93, 2, 947, 2, 168, 3, 2, 2, 2, 4,
	170, 3, 2, 2, 2, 6, 188, 3, 2, 2, 2, 8, 203, 3, 2, 2, 2, 10, 241, 3, 2,
	2, 2, 12, 243, 3, 2, 2, 2, 14, 261, 3, 2, 2, 2, 16, 279, 3, 2, 2, 2, 18,
	281, 3, 2, 2, 2, 20, 304, 3, 2, 2, 2, 22, 306, 3, 2, 2, 2, 24, 337, 3,
	2, 2, 2, 26, 339, 3, 2, 2, 2, 28, 347, 3, 2, 2, 2, 30, 365, 3, 2, 2, 2,
	32, 367, 3, 2, 2, 2, 34, 370, 3, 2, 2, 2, 36, 374, 3, 2, 2, 2, 38, 382,
	3, 2, 2, 2, 40, 386, 3, 2, 2, 2, 42, 390, 3, 2, 2, 2, 44, 397, 3, 2, 2,
	2, 46, 416, 3, 2, 2, 2, 48, 418, 3, 2, 2, 2, 50, 423, 3, 2, 2, 2, 52, 428,
	3, 2, 2, 2, 54, 488, 3, 2, 2, 2, 56, 490, 3, 2, 2, 2, 58, 499, 3, 2, 2,
	2, 60, 510, 3, 2, 2, 2, 62, 609, 3, 2, 2, 2, 64, 611, 3, 2, 2, 2, 66, 618,
	3, 2, 2, 2, 68, 635, 3, 2, 2, 2, 70, 640, 3, 2, 2, 2, 72, 642, 3, 2, 2,
	2, 74, 648, 3, 2, 2, 2, 76, 654, 3, 2, 2, 2, 78, 660, 3, 2, 2, 2, 80, 668,
	3, 2, 2, 2, 82, 672, 3, 2, 2, 2, 84, 680, 3, 2, 2, 2, 86, 684, 3, 2, 2,
	2, 88, 688, 3, 2, 2, 2, 90, 696, 3, 2, 2, 2, 92, 700, 3, 2, 2, 2, 94, 707,
	3, 2, 2, 2, 96, 717, 3, 2, 2, 2, 98, 719, 3, 2, 2, 2, 100, 729, 3, 2, 2,
	2, 102, 731, 3, 2, 2, 2, 104, 733, 3, 2, 2, 2, 106, 736, 3, 2, 2, 2, 108,
	748, 3, 2, 2, 2, 110, 750, 3, 2, 2, 2, 112, 764, 3, 2, 2, 2, 114, 766,
	3, 2, 2, 2, 116, 785, 3, 2, 2, 2, 118, 787, 3, 2, 2, 2, 120, 799, 3, 2,
	2, 2, 122, 801, 3, 2, 2, 2, 124, 803, 3, 2, 2, 2, 126, 805, 3, 2, 2, 2,
	128, 810, 3, 2, 2, 2, 130, 814, 3, 2, 2, 2, 132, 825, 3, 2, 2, 2, 134,
	850, 3, 2, 2, 2, 136, 855, 3, 2, 2, 2, 138, 858, 3, 2, 2, 2, 140, 142,
	5, 4, 3, 2, 141, 143, 7, 109, 2, 2, 142, 141, 3, 2, 2, 2, 142, 143, 3,
	2, 2, 2, 143, 169, 3, 2, 2, 2, 144, 146, 5, 6, 4, 2, 145, 147, 7, 109,
	2, 2, 146, 145, 3, 2, 2, 2, 146, 147, 3, 2, 2, 2, 147, 169, 3, 2, 2, 2,
	148, 150, 5, 12, 7, 2, 149, 151, 7, 109, 2, 2, 150, 149, 3, 2, 2, 2, 150,
	151, 3, 2, 2, 2, 151, 169, 3, 2, 2, 2, 152, 154, 5, 18, 10, 2, 153, 155,
	7, 109, 2, 2, 154, 153, 3, 2, 2, 2, 154, 155, 3, 2, 2, 2, 155, 169, 3,
	2, 2, 2, 156, 158, 5, 22, 12, 2, 157, 159, 7, 109, 2, 2, 158, 157, 3, 2,
	2, 2, 158, 159, 3, 2, 2, 2, 159, 169, 3, 2, 2, 2, 160, 162, 5, 32, 17,
	2, 161, 163, 7, 109, 2, 2, 162, 161, 3, 2, 2, 2, 162, 163, 3, 2, 2, 2,
	163, 169, 3, 2, 2, 2, 164, 166, 5, 136, 69, 2, 165, 167, 7, 109, 2, 2,
	166, 165, 3, 2, 2, 2, 166, 167, 3, 2, 2, 2, 167, 169, 3, 2, 2, 2, 168,
	140, 3, 2, 2, 2, 168, 144, 3, 2, 2, 2, 168, 148, 3, 2, 2, 2, 168, 152,
	3, 2, 2, 2, 168, 156, 3, 2, 2, 2, 168, 160, 3, 2, 2, 2, 168, 164, 3, 2,
	2, 2, 169, 3, 3, 2, 2, 2, 170, 171, 7, 56, 2, 2, 171, 172, 7, 57, 2, 2,
	172, 173, 5, 120, 61, 2, 173, 174, 7, 3, 2, 2, 174, 175, 5, 130, 66, 2,
	175, 176, 7, 4, 2, 2, 176, 177, 7, 91, 2, 2, 177, 178, 7, 3, 2, 2, 178,
	179, 5, 106, 54, 2, 179, 183, 7, 4, 2, 2, 180, 181, 7, 53, 2, 2, 181, 182,
	7, 68, 2, 2, 182, 184, 7, 47, 2, 2, 183, 180, 3, 2, 2, 2, 183, 184, 3,
	2, 2, 2, 184, 186, 3, 2, 2, 2, 185, 187, 5, 46, 24, 2, 186, 185, 3, 2,
	2, 2, 186, 187, 3, 2, 2, 2, 187, 5, 3, 2, 2, 2, 188, 189, 7, 87, 2, 2,
	189, 191, 5, 120, 61, 2, 190, 192, 5, 46, 24, 2, 191, 190, 3, 2, 2, 2,
	191, 192, 3, 2, 2, 2, 192, 193, 3, 2, 2, 2, 193, 194, 7, 75, 2, 2, 194,
	195, 5, 8, 5, 2, 195, 201, 5, 56, 29, 2, 196, 199, 7, 53, 2, 2, 197, 200,
	7, 47, 2, 2, 198, 200, 5, 52, 27, 2, 199, 197, 3, 2, 2, 2, 199, 198, 3,
	2, 2, 2, 200, 202, 3, 2, 2, 2, 201, 196, 3, 2, 2, 2, 201, 202, 3, 2, 2,
	2, 202, 7, 3, 2, 2, 2, 203, 208, 5, 10, 6, 2, 204, 205, 7, 5, 2, 2, 205,
	207, 5, 10, 6, 2, 206, 204, 3, 2, 2, 2, 207, 210, 3, 2, 2, 2, 208, 206,
	3, 2, 2, 2, 208, 209, 3, 2, 2, 2, 209, 9, 3, 2, 2, 2, 210, 208, 3, 2, 2,
	2, 211, 212, 5, 132, 67, 2, 212, 213, 7, 6, 2, 2, 213, 216, 5, 108, 55,
	2, 214, 215, 7, 7, 2, 2, 215, 217, 5, 132, 67, 2, 216, 214, 3, 2, 2, 2,
	216, 217, 3, 2, 2, 2, 217, 242, 3, 2, 2, 2, 218, 219, 5, 132, 67, 2, 219,
	220, 7, 6, 2, 2, 220, 221, 5, 132, 67, 2, 221, 222, 9, 2, 2, 2, 222, 223,
	5, 108, 55, 2, 223, 242, 3, 2, 2, 2, 224, 225, 5, 132, 67, 2, 225, 226,
	9, 3, 2, 2, 226, 227, 5, 108, 55, 2, 227, 242, 3, 2, 2, 2, 228, 229, 5,
	132, 67, 2, 229, 230, 7, 11, 2, 2, 230, 231, 5, 108, 55, 2, 231, 232, 7,
	12, 2, 2, 232, 233, 7, 6, 2, 2, 233, 234, 5, 108, 55, 2, 234, 242, 3, 2,
	2, 2, 235, 236, 5, 132, 67, 2, 236, 237, 7, 13, 2, 2, 237, 238, 5, 132,
	67, 2, 238, 239, 7, 6, 2, 2, 239, 240, 5, 108, 55, 2, 240, 242, 3, 2, 2,
	2, 241, 211, 3, 2, 2, 2, 241, 218, 3, 2, 2, 2, 241, 224, 3, 2, 2, 2, 241,
	228, 3, 2, 2, 2, 241, 235, 3, 2, 2, 2, 242, 11, 3, 2, 2, 2, 243, 245, 7,
	42, 2, 2, 244, 246, 5, 14, 8, 2, 245, 244, 3, 2, 2, 2, 245, 246, 3, 2,
	2, 2, 246, 247, 3, 2, 2, 2, 247, 248, 7, 50, 2, 2, 248, 251, 5, 120, 61,
	2, 249, 250, 7, 89, 2, 2, 250, 252, 5, 48, 25, 2, 251, 249, 3, 2, 2, 2,
	251, 252, 3, 2, 2, 2, 252, 253, 3, 2, 2, 2, 253, 259, 5, 56, 29, 2, 254,
	257, 7, 53, 2, 2, 255, 258, 7, 47, 2, 2, 256, 258, 5, 52, 27, 2, 257, 255,
	3, 2, 2, 2, 257, 256, 3, 2, 2, 2, 258, 260, 3, 2, 2, 2, 259, 254, 3, 2,
	2, 2, 259, 260, 3, 2, 2, 2, 260, 13, 3, 2, 2, 2, 261, 266, 5, 16, 9, 2,
	262, 263, 7, 5, 2, 2, 263, 265, 5, 16, 9, 2, 264, 262, 3, 2, 2, 2, 265,
	268, 3, 2, 2, 2, 266, 264, 3, 2, 2, 2, 266, 267, 3, 2, 2, 2, 267, 15, 3,
	2, 2, 2, 268, 266, 3, 2, 2, 2, 269, 280, 5, 132, 67, 2, 270, 271, 5, 132,
	67, 2, 271, 272, 7, 11, 2, 2, 272, 273, 5, 108, 55, 2, 273, 274, 7, 12,
	2, 2, 274, 280, 3, 2, 2, 2, 275, 276, 5, 132, 67, 2, 276, 277, 7, 13, 2,
	2, 277, 278, 5, 132, 67, 2, 278, 280, 3, 2, 2, 2, 279, 269, 3, 2, 2, 2,
	279, 270, 3, 2, 2, 2, 279, 275, 3, 2, 2, 2, 280, 17, 3, 2, 2, 2, 281, 283,
	7, 30, 2, 2, 282, 284, 9, 4, 2, 2, 283, 282, 3, 2, 2, 2, 283, 284, 3, 2,
	2, 2, 284, 285, 3, 2, 2, 2, 285, 287, 7, 29, 2, 2, 286, 288, 5, 46, 24,
	2, 287, 286, 3, 2, 2, 2, 287, 288, 3, 2, 2, 2, 288, 295, 3, 2, 2, 2, 289,
	291, 5, 20, 11, 2, 290, 292, 7, 109, 2, 2, 291, 290, 3, 2, 2, 2, 291, 292,
	3, 2, 2, 2, 292, 294, 3, 2, 2, 2, 293, 289, 3, 2, 2, 2, 294, 297, 3, 2,
	2, 2, 295, 293, 3, 2, 2, 2, 295, 296, 3, 2, 2, 2, 296, 298, 3, 2, 2, 2,
	297, 295, 3, 2, 2, 2, 298, 299, 7, 25, 2, 2, 299, 300, 7, 29, 2, 2, 300,
	19, 3, 2, 2, 2, 301, 305, 5, 4, 3, 2, 302, 305, 5, 6, 4, 2, 303, 305, 5,
	12, 7, 2, 304, 301, 3, 2, 2, 2, 304, 302, 3, 2, 2, 2, 304, 303, 3, 2, 2,
	2, 305, 21, 3, 2, 2, 2, 306, 308, 7, 74, 2, 2, 307, 309, 7, 61, 2, 2, 308,
	307, 3, 2, 2, 2, 308, 309, 3, 2, 2, 2, 309, 311, 3, 2, 2, 2, 310, 312,
	7, 44, 2, 2, 311, 310, 3, 2, 2, 2, 311, 312, 3, 2, 2, 2, 312, 313, 3, 2,
	2, 2, 313, 314, 5, 24, 13, 2, 314, 315, 7, 50, 2, 2, 315, 317, 5, 120,
	61, 2, 316, 318, 5, 56, 29, 2, 317, 316, 3, 2, 2, 2, 317, 318, 3, 2, 2,
	2, 318, 320, 3, 2, 2, 2, 319, 321, 5, 40, 21, 2, 320, 319, 3, 2, 2, 2,
	320, 321, 3, 2, 2, 2, 321, 323, 3, 2, 2, 2, 322, 324, 5, 34, 18, 2, 323,
	322, 3, 2, 2, 2, 323, 324, 3, 2, 2, 2, 324, 326, 3, 2, 2, 2, 325, 327,
	5, 42, 22, 2, 326, 325, 3, 2, 2, 2, 326, 327, 3, 2, 2, 2, 327, 329, 3,
	2, 2, 2, 328, 330, 5, 44, 23, 2, 329, 328, 3, 2, 2, 2, 329, 330, 3, 2,
	2, 2, 330, 333, 3, 2, 2, 2, 331, 332, 7, 23, 2, 2, 332, 334, 7, 48, 2,
	2, 333, 331, 3, 2, 2, 2, 333, 334, 3, 2, 2, 2, 334, 23, 3, 2, 2, 2, 335,
	338, 7, 14, 2, 2, 336, 338, 5, 26, 14, 2, 337, 335, 3, 2, 2, 2, 337, 336,
	3, 2, 2, 2, 338, 25, 3, 2, 2, 2, 339, 344, 5, 28, 15, 2, 340, 341, 7, 5,
	2, 2, 341, 343, 5, 28, 15, 2, 342, 340, 3, 2, 2, 2, 343, 346, 3, 2, 2,
	2, 344, 342, 3, 2, 2, 2, 344, 345, 3, 2, 2, 2, 345, 27, 3, 2, 2, 2, 346,
	344, 3, 2, 2, 2, 347, 350, 5, 30, 16, 2, 348, 349, 7, 27, 2, 2, 349, 351,
	5, 132, 67, 2, 350, 348, 3, 2, 2, 2, 350, 351, 3, 2, 2, 2, 351, 29, 3,
	2, 2, 2, 352, 366, 5, 132, 67, 2, 353, 366, 5, 108, 55, 2, 354, 355, 7,
	39, 2, 2, 355, 356, 7, 3, 2, 2, 356, 357, 7, 14, 2, 2, 357, 366, 7, 4,
	2, 2, 358, 359, 7, 35, 2, 2, 359, 360, 7, 3, 2, 2, 360, 361, 5, 30, 16,
	2, 361, 362, 7, 27, 2, 2, 362, 363, 5, 114, 58, 2, 363, 364, 7, 4, 2, 2,
	364, 366, 3, 2, 2, 2, 365, 352, 3, 2, 2, 2, 365, 353, 3, 2, 2, 2, 365,
	354, 3, 2, 2, 2, 365, 358, 3, 2, 2, 2, 366, 31, 3, 2, 2, 2, 367, 368, 7,
	88, 2, 2, 368, 369, 5, 126, 64, 2, 369, 33, 3, 2, 2, 2, 370, 371, 7, 71,
	2, 2, 371, 372, 7, 34, 2, 2, 372, 373, 5, 36, 19, 2, 373, 35, 3, 2, 2,
	2, 374, 379, 5, 38, 20, 2, 375, 376, 7, 5, 2, 2, 376, 378, 5, 38, 20, 2,
	377, 375, 3, 2, 2, 2, 378, 381, 3, 2, 2, 2, 379, 377, 3, 2, 2, 2, 379,
	380, 3, 2, 2, 2, 380, 37, 3, 2, 2, 2, 381, 379, 3, 2, 2, 2, 382, 384, 5,
	132, 67, 2, 383, 385, 9, 5, 2, 2, 384, 383, 3, 2, 2, 2, 384, 385, 3, 2,
	2, 2, 385, 39, 3, 2, 2, 2, 386, 387, 7, 52, 2, 2, 387, 388, 7, 34, 2, 2,
	388, 389, 5, 130, 66, 2, 389, 41, 3, 2, 2, 2, 390, 391, 7, 73, 2, 2, 391,
	392, 7, 72, 2, 2, 392, 395, 7, 64, 2, 2, 393, 396, 7, 98, 2, 2, 394, 396,
	5, 100, 51, 2, 395, 393, 3, 2, 2, 2, 395, 394, 3, 2, 2, 2, 396, 43, 3,
	2, 2, 2, 397, 400, 7, 64, 2, 2, 398, 401, 7, 98, 2, 2, 399, 401, 5, 100,
	51, 2, 400, 398, 3, 2, 2, 2, 400, 399, 3, 2, 2, 2, 401, 45, 3, 2, 2, 2,
	402, 403, 7, 89, 2, 2, 403, 417, 5, 48, 25, 2, 404, 405, 7, 89, 2, 2, 405,
	417, 5, 50, 26, 2, 406, 407, 7, 89, 2, 2, 407, 408, 5, 48, 25, 2, 408,
	409, 7, 24, 2, 2, 409, 410, 5, 50, 26, 2, 410, 417, 3, 2, 2, 2, 411, 412,
	7, 89, 2, 2, 412, 413, 5, 50, 26, 2, 413, 414, 7, 24, 2, 2, 414, 415, 5,
	48, 25, 2, 415, 417, 3, 2, 2, 2, 416, 402, 3, 2, 2, 2, 416, 404, 3, 2,
	2, 2, 416, 406, 3, 2, 2, 2, 416, 411, 3, 2, 2, 2, 417, 47, 3, 2, 2, 2,
	418, 421, 7, 78, 2, 2, 419, 422, 7, 98, 2, 2, 420, 422, 5, 100, 51, 2,
	421, 419, 3, 2, 2, 2, 421, 420, 3, 2, 2, 2, 422, 49, 3, 2, 2, 2, 423, 426,
	7, 83, 2, 2, 424, 427, 7, 98, 2, 2, 425, 427, 5, 100, 51, 2, 426, 424,
	3, 2, 2, 2, 426, 425, 3, 2, 2, 2, 427, 51, 3, 2, 2, 2, 428, 433, 5, 54,
	28, 2, 429, 430, 7, 24, 2, 2, 430, 432, 5, 54, 28, 2, 431, 429, 3, 2, 2,
	2, 432, 435, 3, 2, 2, 2, 433, 431, 3, 2, 2, 2, 433, 434, 3, 2, 2, 2, 434,
	53, 3, 2, 2, 2, 435, 433, 3, 2, 2, 2, 436, 437, 5, 132, 67, 2, 437, 438,
	5, 64, 33, 2, 438, 439, 5, 108, 55, 2, 439, 489, 3, 2, 2, 2, 440, 441,
	5, 132, 67, 2, 441, 448, 7, 59, 2, 2, 442, 444, 7, 3, 2, 2, 443, 445, 5,
	106, 54, 2, 444, 443, 3, 2, 2, 2, 444, 445, 3, 2, 2, 2, 445, 446, 3, 2,
	2, 2, 446, 449, 7, 4, 2, 2, 447, 449, 5, 100, 51, 2, 448, 442, 3, 2, 2,
	2, 448, 447, 3, 2, 2, 2, 449, 489, 3, 2, 2, 2, 450, 451, 5, 132, 67, 2,
	451, 452, 7, 11, 2, 2, 452, 453, 5, 108, 55, 2, 453, 454, 7, 12, 2, 2,
	454, 455, 5, 64, 33, 2, 455, 456, 5, 108, 55, 2, 456, 489, 3, 2, 2, 2,
	457, 458, 5, 132, 67, 2, 458, 459, 7, 11, 2, 2, 459, 460, 5, 108, 55, 2,
	460, 461, 7, 12, 2, 2, 461, 468, 7, 59, 2, 2, 462, 464, 7, 3, 2, 2, 463,
	465, 5, 106, 54, 2, 464, 463, 3, 2, 2, 2, 464, 465, 3, 2, 2, 2, 465, 466,
	3, 2, 2, 2, 466, 469, 7, 4, 2, 2, 467, 469, 5, 100, 51, 2, 468, 462, 3,
	2, 2, 2, 468, 467, 3, 2, 2, 2, 469, 489, 3, 2, 2, 2, 470, 471, 5, 132,
	67, 2, 471, 472, 7, 13, 2, 2, 472, 473, 5, 132, 67, 2, 473, 474, 5, 64,
	33, 2, 474, 475, 5, 108, 55, 2, 475, 489, 3, 2, 2, 2, 476, 477, 5, 132,
	67, 2, 477, 478, 7, 13, 2, 2, 478, 479, 5, 132, 67, 2, 479, 486, 7, 59,
	2, 2, 480, 482, 7, 3, 2, 2, 481, 483, 5, 106, 54, 2, 482, 481, 3, 2, 2,
	2, 482, 483, 3, 2, 2, 2, 483, 484, 3, 2, 2, 2, 484, 487, 7, 4, 2, 2, 485,
	487, 5, 100, 51, 2, 486, 480, 3, 2, 2, 2, 486, 485, 3, 2, 2, 2, 487, 489,
	3, 2, 2, 2, 488, 436, 3, 2, 2, 2, 488, 440, 3, 2, 2, 2, 488, 450, 3, 2,
	2, 2, 488, 457, 3, 2, 2, 2, 488, 470, 3, 2, 2, 2, 488, 476, 3, 2, 2, 2,
	489, 55, 3, 2, 2, 2, 490, 491, 7, 94, 2, 2, 491, 492, 5, 58, 30, 2, 492,
	57, 3, 2, 2, 2, 493, 494, 8, 30, 1, 2, 494, 500, 5, 62, 32, 2, 495, 496,
	7, 3, 2, 2, 496, 497, 5, 58, 30, 2, 497, 498, 7, 4, 2, 2, 498, 500, 3,
	2, 2, 2, 499, 493, 3, 2, 2, 2, 499, 495, 3, 2, 2, 2, 500, 507, 3, 2, 2,
	2, 501, 502, 12, 3, 2, 2, 502, 503, 5, 60, 31, 2, 503, 504, 5, 58, 30,
	4, 504, 506, 3, 2, 2, 2, 505, 501, 3, 2, 2, 2, 506, 509, 3, 2, 2, 2, 507,
	505, 3, 2, 2, 2, 507, 508, 3, 2, 2, 2, 508, 59, 3, 2, 2, 2, 509, 507, 3,
	2, 2, 2, 510, 511, 9, 6, 2, 2, 511, 61, 3, 2, 2, 2, 512, 513, 5, 132, 67,
	2, 513, 514, 5, 64, 33, 2, 514, 515, 5, 108, 55, 2, 515, 610, 3, 2, 2,
	2, 516, 517, 7, 82, 2, 2, 517, 518, 7, 3, 2, 2, 518, 519, 5, 130, 66, 2,
	519, 520, 7, 4, 2, 2, 520, 521, 5, 64, 33, 2, 521, 522, 5, 108, 55, 2,
	522, 610, 3, 2, 2, 2, 523, 524, 5, 132, 67, 2, 524, 525, 7, 63, 2, 2, 525,
	526, 5, 108, 55, 2, 526, 610, 3, 2, 2, 2, 527, 528, 5, 132, 67, 2, 528,
	529, 7, 60, 2, 2, 529, 530, 7, 68, 2, 2, 530, 531, 7, 69, 2, 2, 531, 610,
	3, 2, 2, 2, 532, 533, 5, 132, 67, 2, 533, 535, 7, 37, 2, 2, 534, 536, 7,
	62, 2, 2, 535, 534, 3, 2, 2, 2, 535, 536, 3, 2, 2, 2, 536, 537, 3, 2, 2,
	2, 537, 538, 5, 108, 55, 2, 538, 610, 3, 2, 2, 2, 539, 540, 5, 132, 67,
	2, 540, 541, 7, 11, 2, 2, 541, 542, 5, 108, 55, 2, 542, 543, 7, 12, 2,
	2, 543, 544, 5, 64, 33, 2, 544, 545, 5, 108, 55, 2, 545, 610, 3, 2, 2,
	2, 546, 547, 5, 132, 67, 2, 547, 554, 7, 59, 2, 2, 548, 550, 7, 3, 2, 2,
	549, 551, 5, 106, 54, 2, 550, 549, 3, 2, 2, 2, 550, 551, 3, 2, 2, 2, 551,
	552, 3, 2, 2, 2, 552, 555, 7, 4, 2, 2, 553, 555, 5, 100, 51, 2, 554, 548,
	3, 2, 2, 2, 554, 553, 3, 2, 2, 2, 555, 610, 3, 2, 2, 2, 556, 557, 7, 3,
	2, 2, 557, 558, 5, 130, 66, 2, 558, 559, 7, 4, 2, 2, 559, 560, 7, 59, 2,
	2, 560, 561, 7, 3, 2, 2, 561, 562, 7, 4, 2, 2, 562, 610, 3, 2, 2, 2, 563,
	564, 7, 3, 2, 2, 564, 565, 5, 130, 66, 2, 565, 566, 7, 4, 2, 2, 566, 567,
	7, 59, 2, 2, 567, 568, 5, 100, 51, 2, 568, 610, 3, 2, 2, 2, 569, 570, 7,
	3, 2, 2, 570, 571, 5, 130, 66, 2, 571, 572, 7, 4, 2, 2, 572, 573, 7, 59,
	2, 2, 573, 574, 7, 3, 2, 2, 574, 575, 5, 82, 42, 2, 575, 576, 7, 4, 2,
	2, 576, 610, 3, 2, 2, 2, 577, 578, 7, 3, 2, 2, 578, 579, 5, 130, 66, 2,
	579, 580, 7, 4, 2, 2, 580, 581, 7, 59, 2, 2, 581, 582, 7, 3, 2, 2, 582,
	583, 5, 98, 50, 2, 583, 584, 7, 4, 2, 2, 584, 610, 3, 2, 2, 2, 585, 586,
	7, 3, 2, 2, 586, 587, 5, 130, 66, 2, 587, 588, 7, 4, 2, 2, 588, 589, 5,
	64, 33, 2, 589, 590, 5, 84, 43, 2, 590, 610, 3, 2, 2, 2, 591, 592, 7, 3,
	2, 2, 592, 593, 5, 130, 66, 2, 593, 594, 7, 4, 2, 2, 594, 595, 5, 64, 33,
	2, 595, 596, 7, 3, 2, 2, 596, 597, 5, 98, 50, 2, 597, 598, 7, 4, 2, 2,
	598, 610, 3, 2, 2, 2, 599, 600, 7, 3, 2, 2, 600, 601, 5, 130, 66, 2, 601,
	602, 7, 4, 2, 2, 602, 603, 5, 64, 33, 2, 603, 604, 5, 100, 51, 2, 604,
	610, 3, 2, 2, 2, 605, 606, 7, 3, 2, 2, 606, 607, 5, 62, 32, 2, 607, 608,
	7, 4, 2, 2, 608, 610, 3, 2, 2, 2, 609, 512, 3, 2, 2, 2, 609, 516, 3, 2,
	2, 2, 609, 523, 3, 2, 2, 2, 609, 527, 3, 2, 2, 2, 609, 532, 3, 2, 2, 2,
	609, 539, 3, 2, 2, 2, 609, 546, 3, 2, 2, 2, 609, 556, 3, 2, 2, 2, 609,
	563, 3, 2, 2, 2, 609, 569, 3, 2, 2, 2, 609, 577, 3, 2, 2, 2, 609, 585,
	3, 2, 2, 2, 609, 591, 3, 2, 2, 2, 609, 599, 3, 2, 2, 2, 609, 605, 3, 2,
	2, 2, 610, 63, 3, 2, 2, 2, 611, 612, 9, 7, 2, 2, 612, 65, 3, 2, 2, 2, 613,
	619, 5, 68, 35, 2, 614, 619, 5, 70, 36, 2, 615, 619, 5, 84, 43, 2, 616,
	619, 5, 86, 44, 2, 617, 619, 7, 69, 2, 2, 618, 613, 3, 2, 2, 2, 618, 614,
	3, 2, 2, 2, 618, 615, 3, 2, 2, 2, 618, 616, 3, 2, 2, 2, 618, 617, 3, 2,
	2, 2, 619, 67, 3, 2, 2, 2, 620, 636, 7, 96, 2, 2, 621, 636, 7, 98, 2, 2,
	622, 636, 7, 100, 2, 2, 623, 636, 7, 101, 2, 2, 624, 636, 7, 102, 2, 2,
	625, 636, 7, 105, 2, 2, 626, 636, 7, 104, 2, 2, 627, 629, 7, 8, 2, 2, 628,
	627, 3, 2, 2, 2, 628, 629, 3, 2, 2, 2, 629, 630, 3, 2, 2, 2, 630, 636,
	7, 67, 2, 2, 631, 633, 7, 8, 2, 2, 632, 631, 3, 2, 2, 2, 632, 633, 3, 2,
	2, 2, 633, 634, 3, 2, 2, 2, 634, 636, 7, 55, 2, 2, 635, 620, 3, 2, 2, 2,
	635, 621, 3, 2, 2, 2, 635, 622, 3, 2, 2, 2, 635, 623, 3, 2, 2, 2, 635,
	624, 3, 2, 2, 2, 635, 625, 3, 2, 2, 2, 635, 626, 3, 2, 2, 2, 635, 628,
	3, 2, 2, 2, 635, 632, 3, 2, 2, 2, 636, 69, 3, 2, 2, 2, 637, 641, 5, 72,
	37, 2, 638, 641, 5, 74, 38, 2, 639, 641, 5, 76, 39, 2, 640, 637, 3, 2,
	2, 2, 640, 638, 3, 2, 2, 2, 640, 639, 3, 2, 2, 2, 641, 71, 3, 2, 2, 2,
	642, 644, 7, 11, 2, 2, 643, 645, 5, 106, 54, 2, 644, 643, 3, 2, 2, 2, 644,
	645, 3, 2, 2, 2, 645, 646, 3, 2, 2, 2, 646, 647, 7, 12, 2, 2, 647, 73,
	3, 2, 2, 2, 648, 650, 7, 21, 2, 2, 649, 651, 5, 106, 54, 2, 650, 649, 3,
	2, 2, 2, 650, 651, 3, 2, 2, 2, 651, 652, 3, 2, 2, 2, 652, 653, 7, 22, 2,
	2, 653, 75, 3, 2, 2, 2, 654, 656, 7, 21, 2, 2, 655, 657, 5, 78, 40, 2,
	656, 655, 3, 2, 2, 2, 656, 657, 3, 2, 2, 2, 657, 658, 3, 2, 2, 2, 658,
	659, 7, 22, 2, 2, 659, 77, 3, 2, 2, 2, 660, 665, 5, 80, 41, 2, 661, 662,
	7, 5, 2, 2, 662, 664, 5, 80, 41, 2, 663, 661, 3, 2, 2, 2, 664, 667, 3,
	2, 2, 2, 665, 663, 3, 2, 2, 2, 665, 666, 3, 2, 2, 2, 666, 79, 3, 2, 2,
	2, 667, 665, 3, 2, 2, 2, 668, 669, 5, 108, 55, 2, 669, 670, 7, 20, 2, 2,
	670, 671, 5, 108, 55, 2, 671, 81, 3, 2, 2, 2, 672, 677, 5, 84, 43, 2, 673,
	674, 7, 5, 2, 2, 674, 676, 5, 84, 43, 2, 675, 673, 3, 2, 2, 2, 676, 679,
	3, 2, 2, 2, 677, 675, 3, 2, 2, 2, 677, 678, 3, 2, 2, 2, 678, 83, 3, 2,
	2, 2, 679, 677, 3, 2, 2, 2, 680, 681, 7, 3, 2, 2, 681, 682, 5, 106, 54,
	2, 682, 683, 7, 4, 2, 2, 683, 85, 3, 2, 2, 2, 684, 685, 7, 21, 2, 2, 685,
	686, 5, 88, 45, 2, 686, 687, 7, 22, 2, 2, 687, 87, 3, 2, 2, 2, 688, 693,
	5, 90, 46, 2, 689, 690, 7, 5, 2, 2, 690, 692, 5, 90, 46, 2, 691, 689, 3,
	2, 2, 2, 692, 695, 3, 2, 2, 2, 693, 691, 3, 2, 2, 2, 693, 694, 3, 2, 2,
	2, 694, 89, 3, 2, 2, 2, 695, 693, 3, 2, 2, 2, 696, 697, 5, 132, 67, 2,
	697, 698, 7, 20, 2, 2, 698, 699, 5, 108, 55, 2, 699, 91, 3, 2, 2, 2, 700,
	701, 5, 122, 62, 2, 701, 703, 7, 3, 2, 2, 702, 704, 5, 94, 48, 2, 703,
	702, 3, 2, 2, 2, 703, 704, 3, 2, 2, 2, 704, 705, 3, 2, 2, 2, 705, 706,
	7, 4, 2, 2, 706, 93, 3, 2, 2, 2, 707, 712, 5, 96, 49, 2, 708, 709, 7, 5,
	2, 2, 709, 711, 5, 96, 49, 2, 710, 708, 3, 2, 2, 2, 711, 714, 3, 2, 2,
	2, 712, 710, 3, 2, 2, 2, 712, 713, 3, 2, 2, 2, 713, 95, 3, 2, 2, 2, 714,
	712, 3, 2, 2, 2, 715, 718, 5, 132, 67, 2, 716, 718, 5, 108, 55, 2, 717,
	715, 3, 2, 2, 2, 717, 716, 3, 2, 2, 2, 718, 97, 3, 2, 2, 2, 719, 724, 5,
	100, 51, 2, 720, 721, 7, 5, 2, 2, 721, 723, 5, 100, 51, 2, 722, 720, 3,
	2, 2, 2, 723, 726, 3, 2, 2, 2, 724, 722, 3, 2, 2, 2, 724, 725, 3, 2, 2,
	2, 725, 99, 3, 2, 2, 2, 726, 724, 3, 2, 2, 2, 727, 730, 5, 102, 52, 2,
	728, 730, 5, 104, 53, 2, 729, 727, 3, 2, 2, 2, 729, 728, 3, 2, 2, 2, 730,
	101, 3, 2, 2, 2, 731, 732, 7, 99, 2, 2, 732, 103, 3, 2, 2, 2, 733, 734,
	7, 20, 2, 2, 734, 735, 5, 132, 67, 2, 735, 105, 3, 2, 2, 2, 736, 741, 5,
	108, 55, 2, 737, 738, 7, 5, 2, 2, 738, 740, 5, 108, 55, 2, 739, 737, 3,
	2, 2, 2, 740, 743, 3, 2, 2, 2, 741, 739, 3, 2, 2, 2, 741, 742, 3, 2, 2,
	2, 742, 107, 3, 2, 2, 2, 743, 741, 3, 2, 2, 2, 744, 749, 5, 66, 34, 2,
	745, 749, 5, 100, 51, 2, 746, 749, 5, 92, 47, 2, 747, 749, 5, 110, 56,
	2, 748, 744, 3, 2, 2, 2, 748, 745, 3, 2, 2, 2, 748, 746, 3, 2, 2, 2, 748,
	747, 3, 2, 2, 2, 749, 109, 3, 2, 2, 2, 750, 751, 7, 3, 2, 2, 751, 752,
	5, 112, 57, 2, 752, 753, 7, 4, 2, 2, 753, 754, 5, 108, 55, 2, 754, 111,
	3, 2, 2, 2, 755, 765, 5, 114, 58, 2, 756, 765, 5, 116, 59, 2, 757, 765,
	5, 118, 60, 2, 758, 765, 5, 124, 63, 2, 759, 760, 7, 51, 2, 2, 760, 761,
	7, 15, 2, 2, 761, 762, 5, 112, 57, 2, 762, 763, 7, 17, 2, 2, 763, 765,
	3, 2, 2, 2, 764, 755, 3, 2, 2, 2, 764, 756, 3, 2, 2, 2, 764, 757, 3, 2,
	2, 2, 764, 758, 3, 2, 2, 2, 764, 759, 3, 2, 2, 2, 765, 113, 3, 2, 2, 2,
	766, 767, 9, 8, 2, 2, 767, 115, 3, 2, 2, 2, 768, 769, 7, 65, 2, 2, 769,
	770, 7, 15, 2, 2, 770, 771, 5, 112, 57, 2, 771, 772, 7, 17, 2, 2, 772,
	786, 3, 2, 2, 2, 773, 774, 7, 75, 2, 2, 774, 775, 7, 15, 2, 2, 775, 776,
	5, 112, 57, 2, 776, 777, 7, 17, 2, 2, 777, 786, 3, 2, 2, 2, 778, 779, 7,
	66, 2, 2, 779, 780, 7, 15, 2, 2, 780, 781, 5, 112, 57, 2, 781, 782, 7,
	5, 2, 2, 782, 783, 5, 112, 57, 2, 783, 784, 7, 17, 2, 2, 784, 786, 3, 2,
	2, 2, 785, 768, 3, 2, 2, 2, 785, 773, 3, 2, 2, 2, 785, 778, 3, 2, 2, 2,
	786, 117, 3, 2, 2, 2, 787, 788, 7, 84, 2, 2, 788, 789, 7, 15, 2, 2, 789,
	794, 5, 112, 57, 2, 790, 791, 7, 5, 2, 2, 791, 793, 5, 112, 57, 2, 792,
	790, 3, 2, 2, 2, 793, 796, 3, 2, 2, 2, 794, 792, 3, 2, 2, 2, 794, 795,
	3, 2, 2, 2, 795, 797, 3, 2, 2, 2, 796, 794, 3, 2, 2, 2, 797, 798, 7, 17,
	2, 2, 798, 119, 3, 2, 2, 2, 799, 800, 5, 128, 65, 2, 800, 121, 3, 2, 2,
	2, 801, 802, 5, 128, 65, 2, 802, 123, 3, 2, 2, 2, 803, 804, 5, 128, 65,
	2, 804, 125, 3, 2, 2, 2, 805, 806, 5, 132, 67, 2, 806, 127, 3, 2, 2, 2,
	807, 808, 5, 126, 64, 2, 808, 809, 7, 13, 2, 2, 809, 811, 3, 2, 2, 2, 810,
	807, 3, 2, 2, 2, 810, 811, 3, 2, 2, 2, 811, 812, 3, 2, 2, 2, 812, 813,
	5, 132, 67, 2, 813, 129, 3, 2, 2, 2, 814, 819, 5, 132, 67, 2, 815, 816,
	7, 5, 2, 2, 816, 818, 5, 132, 67, 2, 817, 815, 3, 2, 2, 2, 818, 821, 3,
	2, 2, 2, 819, 817, 3, 2, 2, 2, 819, 820, 3, 2, 2, 2, 820, 131, 3, 2, 2,
	2, 821, 819, 3, 2, 2, 2, 822, 826, 7, 103, 2, 2, 823, 826, 7, 97, 2, 2,
	824, 826, 5, 134, 68, 2, 825, 822, 3, 2, 2, 2, 825, 823, 3, 2, 2, 2, 825,
	824, 3, 2, 2, 2, 826, 133, 3, 2, 2, 2, 827, 851, 7, 27, 2, 2, 828, 851,
	7, 35, 2, 2, 829, 851, 7, 36, 2, 2, 830, 851, 7, 37, 2, 2, 831, 851, 7,
	39, 2, 2, 832, 851, 7, 44, 2, 2, 833, 851, 7, 47, 2, 2, 834, 851, 7, 48,
	2, 2, 835, 851, 7, 51, 2, 2, 836, 851, 7, 52, 2, 2, 837, 851, 7, 61, 2,
	2, 838, 851, 7, 62, 2, 2, 839, 851, 7, 63, 2, 2, 840, 851, 7, 65, 2, 2,
	841, 851, 7, 66, 2, 2, 842, 851, 7, 72, 2, 2, 843, 851, 7, 73, 2, 2, 844,
	851, 7, 83, 2, 2, 845, 851, 7, 84, 2, 2, 846, 851, 7, 85, 2, 2, 847, 851,
	7, 91, 2, 2, 848, 851, 7, 95, 2, 2, 849, 851, 5, 114, 58, 2, 850, 827,
	3, 2, 2, 2, 850, 828, 3, 2, 2, 2, 850, 829, 3, 2, 2, 2, 850, 830, 3, 2,
	2, 2, 850, 831, 3, 2, 2, 2, 850, 832, 3, 2, 2, 2, 850, 833, 3, 2, 2, 2,
	850, 834, 3, 2, 2, 2, 850, 835, 3, 2, 2, 2, 850, 836, 3, 2, 2, 2, 850,
	837, 3, 2, 2, 2, 850, 838, 3, 2, 2, 2, 850, 839, 3, 2, 2, 2, 850, 840,
	3, 2, 2, 2, 850, 841, 3, 2, 2, 2, 850, 842, 3, 2, 2, 2, 850, 843, 3, 2,
	2, 2, 850, 844, 3, 2, 2, 2, 850, 845, 3, 2, 2, 2, 850, 846, 3, 2, 2, 2,
	850, 847, 3, 2, 2, 2, 850, 848, 3, 2, 2, 2, 850, 849, 3, 2, 2, 2, 851,
	135, 3, 2, 2, 2, 852, 854, 5, 138, 70, 2, 853, 852, 3, 2, 2, 2, 854, 857,
	3, 2, 2, 2, 855, 853, 3, 2, 2, 2, 855, 856, 3, 2, 2, 2, 856, 137, 3, 2,
	2, 2, 857, 855, 3, 2, 2, 2, 858, 859, 11, 2, 2, 2, 859, 139, 3, 2, 2, 2,
	88, 142, 146, 150, 154, 158, 162, 166, 168, 183, 186, 191, 199, 201, 208,
	216, 241, 245, 251, 257, 259, 266, 279, 283, 287, 291, 295, 304, 308, 311,
	317, 320, 323, 326, 329, 333, 337, 344, 350, 365, 379, 384, 395, 400, 416,
	421, 426, 433, 444, 448, 464, 468, 482, 486, 488, 499, 507, 535, 550, 554,
	609, 618, 628, 632, 635, 640, 644, 650, 656, 665, 677, 693, 703, 712, 717,
	724, 729, 741, 748, 764, 785, 794, 810, 819, 825, 850, 855,
}
var literalNames = []string{
	"", "'('", "')'", "','", "'='", "'+'", "'-'", "'+='", "'-='", "'['", "']'",
	"'.'", "'*'", "'<'", "'<='", "'>'", "'>='", "'!='", "':'", "'{'", "'}'",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "'?'", "", "", "", "", "", "", "", "", "", "';'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "K_ALLOW", "K_AND", "K_APPLY", "K_ASC", "K_AS", "K_ASCII",
	"K_BATCH", "K_BEGIN", "K_BIGINT", "K_BLOB", "K_BOOLEAN", "K_BY", "K_CAST",
	"K_CLUSTERING", "K_CONTAINS", "K_COUNTER", "K_COUNT", "K_DATE", "K_DECIMAL",
	"K_DELETE", "K_DESC", "K_DISTINCT", "K_DOUBLE", "K_DURATION", "K_EXISTS",
	"K_FILTERING", "K_FLOAT", "K_FROM", "K_FROZEN", "K_GROUP", "K_IF", "K_INET",
	"K_INFINITY", "K_INSERT", "K_INTO", "K_INT", "K_IN", "K_IS", "K_JSON",
	"K_KEY", "K_LIKE", "K_LIMIT", "K_LIST", "K_MAP", "K_NAN", "K_NOT", "K_NULL",
	"K_OR", "K_ORDER", "K_PARTITION", "K_PER", "K_SELECT", "K_SET", "K_SMALLINT",
	"K_TEXT", "K_TIMESTAMP", "K_TIMEUUID", "K_TIME", "K_TINYINT", "K_TOKEN",
	"K_TTL", "K_TUPLE", "K_TYPE", "K_UNLOGGED", "K_UPDATE", "K_USE", "K_USING",
	"K_UUID", "K_VALUES", "K_VARCHAR", "K_VARINT", "K_WHERE", "K_WRITETIME",
	"STRING_LITERAL", "QUOTED_IDENTIFIER", "INTEGER", "QMARK", "FLOAT", "BOOLEAN",
	"DURATION", "UNQUOTED_IDENTIFIER", "HEXNUMBER", "UUID", "WS", "COMMENT",
	"MULTILINE_COMMENT", "EOS", "OTHER",
}

var ruleNames = []string{
	"cqlStatement", "insertStatement", "updateStatement", "updateOperations",
	"updateOperation", "deleteStatement", "deleteOperations", "deleteOperation",
	"batchStatement", "batchChildStatement", "selectStatement", "selectClause",
	"selectors", "selector", "unaliasedSelector", "useStatement", "orderByClause",
	"orderings", "ordering", "groupByClause", "perPartitionLimitClause", "limitClause",
	"usingClause", "timestamp", "ttl", "conditions", "condition", "whereClause",
	"whereExpression", "logicalOperator", "relation", "operator", "literal",
	"primitiveLiteral", "collectionLiteral", "listLiteral", "setLiteral", "mapLiteral",
	"mapEntries", "mapEntry", "tupleLiterals", "tupleLiteral", "udtLiteral",
	"fieldLiterals", "fieldLiteral", "functionCall", "functionArgs", "functionArg",
	"bindMarkers", "bindMarker", "positionalBindMarker", "namedBindMarker",
	"terms", "term", "typeCast", "cqlType", "primitiveType", "collectionType",
	"tupleType", "tableName", "functionName", "userTypeName", "keyspaceName",
	"qualifiedIdentifier", "identifiers", "identifier", "unreservedKeyword",
	"unrecognizedStatement", "unrecognizedToken",
}

type SimplifiedCqlParser struct {
	*antlr.BaseParser
}

// NewSimplifiedCqlParser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *SimplifiedCqlParser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewSimplifiedCqlParser(input antlr.TokenStream) *SimplifiedCqlParser {
	this := new(SimplifiedCqlParser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "SimplifiedCql.g4"

	return this
}

// SimplifiedCqlParser tokens.
const (
	SimplifiedCqlParserEOF                 = antlr.TokenEOF
	SimplifiedCqlParserT__0                = 1
	SimplifiedCqlParserT__1                = 2
	SimplifiedCqlParserT__2                = 3
	SimplifiedCqlParserT__3                = 4
	SimplifiedCqlParserT__4                = 5
	SimplifiedCqlParserT__5                = 6
	SimplifiedCqlParserT__6                = 7
	SimplifiedCqlParserT__7                = 8
	SimplifiedCqlParserT__8                = 9
	SimplifiedCqlParserT__9                = 10
	SimplifiedCqlParserT__10               = 11
	SimplifiedCqlParserT__11               = 12
	SimplifiedCqlParserT__12               = 13
	SimplifiedCqlParserT__13               = 14
	SimplifiedCqlParserT__14               = 15
	SimplifiedCqlParserT__15               = 16
	SimplifiedCqlParserT__16               = 17
	SimplifiedCqlParserT__17               = 18
	SimplifiedCqlParserT__18               = 19
	SimplifiedCqlParserT__19               = 20
	SimplifiedCqlParserK_ALLOW             = 21
	SimplifiedCqlParserK_AND               = 22
	SimplifiedCqlParserK_APPLY             = 23
	SimplifiedCqlParserK_ASC               = 24
	SimplifiedCqlParserK_AS                = 25
	SimplifiedCqlParserK_ASCII             = 26
	SimplifiedCqlParserK_BATCH             = 27
	SimplifiedCqlParserK_BEGIN             = 28
	SimplifiedCqlParserK_BIGINT            = 29
	SimplifiedCqlParserK_BLOB              = 30
	SimplifiedCqlParserK_BOOLEAN           = 31
	SimplifiedCqlParserK_BY                = 32
	SimplifiedCqlParserK_CAST              = 33
	SimplifiedCqlParserK_CLUSTERING        = 34
	SimplifiedCqlParserK_CONTAINS          = 35
	SimplifiedCqlParserK_COUNTER           = 36
	SimplifiedCqlParserK_COUNT             = 37
	SimplifiedCqlParserK_DATE              = 38
	SimplifiedCqlParserK_DECIMAL           = 39
	SimplifiedCqlParserK_DELETE            = 40
	SimplifiedCqlParserK_DESC              = 41
	SimplifiedCqlParserK_DISTINCT          = 42
	SimplifiedCqlParserK_DOUBLE            = 43
	SimplifiedCqlParserK_DURATION          = 44
	SimplifiedCqlParserK_EXISTS            = 45
	SimplifiedCqlParserK_FILTERING         = 46
	SimplifiedCqlParserK_FLOAT             = 47
	SimplifiedCqlParserK_FROM              = 48
	SimplifiedCqlParserK_FROZEN            = 49
	SimplifiedCqlParserK_GROUP             = 50
	SimplifiedCqlParserK_IF                = 51
	SimplifiedCqlParserK_INET              = 52
	SimplifiedCqlParserK_INFINITY          = 53
	SimplifiedCqlParserK_INSERT            = 54
	SimplifiedCqlParserK_INTO              = 55
	SimplifiedCqlParserK_INT               = 56
	SimplifiedCqlParserK_IN                = 57
	SimplifiedCqlParserK_IS                = 58
	SimplifiedCqlParserK_JSON              = 59
	SimplifiedCqlParserK_KEY               = 60
	SimplifiedCqlParserK_LIKE              = 61
	SimplifiedCqlParserK_LIMIT             = 62
	SimplifiedCqlParserK_LIST              = 63
	SimplifiedCqlParserK_MAP               = 64
	SimplifiedCqlParserK_NAN               = 65
	SimplifiedCqlParserK_NOT               = 66
	SimplifiedCqlParserK_NULL              = 67
	SimplifiedCqlParserK_OR                = 68
	SimplifiedCqlParserK_ORDER             = 69
	SimplifiedCqlParserK_PARTITION         = 70
	SimplifiedCqlParserK_PER               = 71
	SimplifiedCqlParserK_SELECT            = 72
	SimplifiedCqlParserK_SET               = 73
	SimplifiedCqlParserK_SMALLINT          = 74
	SimplifiedCqlParserK_TEXT              = 75
	SimplifiedCqlParserK_TIMESTAMP         = 76
	SimplifiedCqlParserK_TIMEUUID          = 77
	SimplifiedCqlParserK_TIME              = 78
	SimplifiedCqlParserK_TINYINT           = 79
	SimplifiedCqlParserK_TOKEN             = 80
	SimplifiedCqlParserK_TTL               = 81
	SimplifiedCqlParserK_TUPLE             = 82
	SimplifiedCqlParserK_TYPE              = 83
	SimplifiedCqlParserK_UNLOGGED          = 84
	SimplifiedCqlParserK_UPDATE            = 85
	SimplifiedCqlParserK_USE               = 86
	SimplifiedCqlParserK_USING             = 87
	SimplifiedCqlParserK_UUID              = 88
	SimplifiedCqlParserK_VALUES            = 89
	SimplifiedCqlParserK_VARCHAR           = 90
	SimplifiedCqlParserK_VARINT            = 91
	SimplifiedCqlParserK_WHERE             = 92
	SimplifiedCqlParserK_WRITETIME         = 93
	SimplifiedCqlParserSTRING_LITERAL      = 94
	SimplifiedCqlParserQUOTED_IDENTIFIER   = 95
	SimplifiedCqlParserINTEGER             = 96
	SimplifiedCqlParserQMARK               = 97
	SimplifiedCqlParserFLOAT               = 98
	SimplifiedCqlParserBOOLEAN             = 99
	SimplifiedCqlParserDURATION            = 100
	SimplifiedCqlParserUNQUOTED_IDENTIFIER = 101
	SimplifiedCqlParserHEXNUMBER           = 102
	SimplifiedCqlParserUUID                = 103
	SimplifiedCqlParserWS                  = 104
	SimplifiedCqlParserCOMMENT             = 105
	SimplifiedCqlParserMULTILINE_COMMENT   = 106
	SimplifiedCqlParserEOS                 = 107
	SimplifiedCqlParserOTHER               = 108
)

// SimplifiedCqlParser rules.
const (
	SimplifiedCqlParserRULE_cqlStatement            = 0
	SimplifiedCqlParserRULE_insertStatement         = 1
	SimplifiedCqlParserRULE_updateStatement         = 2
	SimplifiedCqlParserRULE_updateOperations        = 3
	SimplifiedCqlParserRULE_updateOperation         = 4
	SimplifiedCqlParserRULE_deleteStatement         = 5
	SimplifiedCqlParserRULE_deleteOperations        = 6
	SimplifiedCqlParserRULE_deleteOperation         = 7
	SimplifiedCqlParserRULE_batchStatement          = 8
	SimplifiedCqlParserRULE_batchChildStatement     = 9
	SimplifiedCqlParserRULE_selectStatement         = 10
	SimplifiedCqlParserRULE_selectClause            = 11
	SimplifiedCqlParserRULE_selectors               = 12
	SimplifiedCqlParserRULE_selector                = 13
	SimplifiedCqlParserRULE_unaliasedSelector       = 14
	SimplifiedCqlParserRULE_useStatement            = 15
	SimplifiedCqlParserRULE_orderByClause           = 16
	SimplifiedCqlParserRULE_orderings               = 17
	SimplifiedCqlParserRULE_ordering                = 18
	SimplifiedCqlParserRULE_groupByClause           = 19
	SimplifiedCqlParserRULE_perPartitionLimitClause = 20
	SimplifiedCqlParserRULE_limitClause             = 21
	SimplifiedCqlParserRULE_usingClause             = 22
	SimplifiedCqlParserRULE_timestamp               = 23
	SimplifiedCqlParserRULE_ttl                     = 24
	SimplifiedCqlParserRULE_conditions              = 25
	SimplifiedCqlParserRULE_condition               = 26
	SimplifiedCqlParserRULE_whereClause             = 27
	SimplifiedCqlParserRULE_whereExpression         = 28
	SimplifiedCqlParserRULE_logicalOperator         = 29
	SimplifiedCqlParserRULE_relation                = 30
	SimplifiedCqlParserRULE_operator                = 31
	SimplifiedCqlParserRULE_literal                 = 32
	SimplifiedCqlParserRULE_primitiveLiteral        = 33
	SimplifiedCqlParserRULE_collectionLiteral       = 34
	SimplifiedCqlParserRULE_listLiteral             = 35
	SimplifiedCqlParserRULE_setLiteral              = 36
	SimplifiedCqlParserRULE_mapLiteral              = 37
	SimplifiedCqlParserRULE_mapEntries              = 38
	SimplifiedCqlParserRULE_mapEntry                = 39
	SimplifiedCqlParserRULE_tupleLiterals           = 40
	SimplifiedCqlParserRULE_tupleLiteral            = 41
	SimplifiedCqlParserRULE_udtLiteral              = 42
	SimplifiedCqlParserRULE_fieldLiterals           = 43
	SimplifiedCqlParserRULE_fieldLiteral            = 44
	SimplifiedCqlParserRULE_functionCall            = 45
	SimplifiedCqlParserRULE_functionArgs            = 46
	SimplifiedCqlParserRULE_functionArg             = 47
	SimplifiedCqlParserRULE_bindMarkers             = 48
	SimplifiedCqlParserRULE_bindMarker              = 49
	SimplifiedCqlParserRULE_positionalBindMarker    = 50
	SimplifiedCqlParserRULE_namedBindMarker         = 51
	SimplifiedCqlParserRULE_terms                   = 52
	SimplifiedCqlParserRULE_term                    = 53
	SimplifiedCqlParserRULE_typeCast                = 54
	SimplifiedCqlParserRULE_cqlType                 = 55
	SimplifiedCqlParserRULE_primitiveType           = 56
	SimplifiedCqlParserRULE_collectionType          = 57
	SimplifiedCqlParserRULE_tupleType               = 58
	SimplifiedCqlParserRULE_tableName               = 59
	SimplifiedCqlParserRULE_functionName            = 60
	SimplifiedCqlParserRULE_userTypeName            = 61
	SimplifiedCqlParserRULE_keyspaceName            = 62
	SimplifiedCqlParserRULE_qualifiedIdentifier     = 63
	SimplifiedCqlParserRULE_identifiers             = 64
	SimplifiedCqlParserRULE_identifier              = 65
	SimplifiedCqlParserRULE_unreservedKeyword       = 66
	SimplifiedCqlParserRULE_unrecognizedStatement   = 67
	SimplifiedCqlParserRULE_unrecognizedToken       = 68
)

// ICqlStatementContext is an interface to support dynamic dispatch.
type ICqlStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCqlStatementContext differentiates from other interfaces.
	IsCqlStatementContext()
}

type CqlStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCqlStatementContext() *CqlStatementContext {
	var p = new(CqlStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_cqlStatement
	return p
}

func (*CqlStatementContext) IsCqlStatementContext() {}

func NewCqlStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CqlStatementContext {
	var p = new(CqlStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_cqlStatement

	return p
}

func (s *CqlStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CqlStatementContext) InsertStatement() IInsertStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertStatementContext)
}

func (s *CqlStatementContext) EOS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserEOS, 0)
}

func (s *CqlStatementContext) UpdateStatement() IUpdateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateStatementContext)
}

func (s *CqlStatementContext) DeleteStatement() IDeleteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteStatementContext)
}

func (s *CqlStatementContext) BatchStatement() IBatchStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBatchStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBatchStatementContext)
}

func (s *CqlStatementContext) SelectStatement() ISelectStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStatementContext)
}

func (s *CqlStatementContext) UseStatement() IUseStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUseStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUseStatementContext)
}

func (s *CqlStatementContext) UnrecognizedStatement() IUnrecognizedStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnrecognizedStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnrecognizedStatementContext)
}

func (s *CqlStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CqlStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CqlStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterCqlStatement(s)
	}
}

func (s *CqlStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitCqlStatement(s)
	}
}

func (p *SimplifiedCqlParser) CqlStatement() (localctx ICqlStatementContext) {
	this := p
	_ = this

	localctx = NewCqlStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, SimplifiedCqlParserRULE_cqlStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(166)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(138)
			p.InsertStatement()
		}
		p.SetState(140)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(139)
				p.Match(SimplifiedCqlParserEOS)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(142)
			p.UpdateStatement()
		}
		p.SetState(144)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(143)
				p.Match(SimplifiedCqlParserEOS)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(146)
			p.DeleteStatement()
		}
		p.SetState(148)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(147)
				p.Match(SimplifiedCqlParserEOS)
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(150)
			p.BatchStatement()
		}
		p.SetState(152)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(151)
				p.Match(SimplifiedCqlParserEOS)
			}

		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(154)
			p.SelectStatement()
		}
		p.SetState(156)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(155)
				p.Match(SimplifiedCqlParserEOS)
			}

		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(158)
			p.UseStatement()
		}
		p.SetState(160)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(159)
				p.Match(SimplifiedCqlParserEOS)
			}

		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(162)
			p.UnrecognizedStatement()
		}
		p.SetState(164)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(163)
				p.Match(SimplifiedCqlParserEOS)
			}

		}

	}

	return localctx
}

// IInsertStatementContext is an interface to support dynamic dispatch.
type IInsertStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsertStatementContext differentiates from other interfaces.
	IsInsertStatementContext()
}

type InsertStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsertStatementContext() *InsertStatementContext {
	var p = new(InsertStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_insertStatement
	return p
}

func (*InsertStatementContext) IsInsertStatementContext() {}

func NewInsertStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InsertStatementContext {
	var p = new(InsertStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_insertStatement

	return p
}

func (s *InsertStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *InsertStatementContext) K_INSERT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_INSERT, 0)
}

func (s *InsertStatementContext) K_INTO() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_INTO, 0)
}

func (s *InsertStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *InsertStatementContext) Identifiers() IIdentifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifiersContext)
}

func (s *InsertStatementContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_VALUES, 0)
}

func (s *InsertStatementContext) Terms() ITermsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *InsertStatementContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IF, 0)
}

func (s *InsertStatementContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_NOT, 0)
}

func (s *InsertStatementContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_EXISTS, 0)
}

func (s *InsertStatementContext) UsingClause() IUsingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingClauseContext)
}

func (s *InsertStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InsertStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterInsertStatement(s)
	}
}

func (s *InsertStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitInsertStatement(s)
	}
}

func (p *SimplifiedCqlParser) InsertStatement() (localctx IInsertStatementContext) {
	this := p
	_ = this

	localctx = NewInsertStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, SimplifiedCqlParserRULE_insertStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(168)
		p.Match(SimplifiedCqlParserK_INSERT)
	}
	{
		p.SetState(169)
		p.Match(SimplifiedCqlParserK_INTO)
	}
	{
		p.SetState(170)
		p.TableName()
	}
	{
		p.SetState(171)
		p.Match(SimplifiedCqlParserT__0)
	}
	{
		p.SetState(172)
		p.Identifiers()
	}
	{
		p.SetState(173)
		p.Match(SimplifiedCqlParserT__1)
	}
	{
		p.SetState(174)
		p.Match(SimplifiedCqlParserK_VALUES)
	}
	{
		p.SetState(175)
		p.Match(SimplifiedCqlParserT__0)
	}
	{
		p.SetState(176)
		p.Terms()
	}
	{
		p.SetState(177)
		p.Match(SimplifiedCqlParserT__1)
	}
	p.SetState(181)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_IF {
		{
			p.SetState(178)
			p.Match(SimplifiedCqlParserK_IF)
		}
		{
			p.SetState(179)
			p.Match(SimplifiedCqlParserK_NOT)
		}
		{
			p.SetState(180)
			p.Match(SimplifiedCqlParserK_EXISTS)
		}

	}
	p.SetState(184)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_USING {
		{
			p.SetState(183)
			p.UsingClause()
		}

	}

	return localctx
}

// IUpdateStatementContext is an interface to support dynamic dispatch.
type IUpdateStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdateStatementContext differentiates from other interfaces.
	IsUpdateStatementContext()
}

type UpdateStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateStatementContext() *UpdateStatementContext {
	var p = new(UpdateStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_updateStatement
	return p
}

func (*UpdateStatementContext) IsUpdateStatementContext() {}

func NewUpdateStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateStatementContext {
	var p = new(UpdateStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_updateStatement

	return p
}

func (s *UpdateStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateStatementContext) K_UPDATE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_UPDATE, 0)
}

func (s *UpdateStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *UpdateStatementContext) K_SET() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_SET, 0)
}

func (s *UpdateStatementContext) UpdateOperations() IUpdateOperationsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateOperationsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateOperationsContext)
}

func (s *UpdateStatementContext) WhereClause() IWhereClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *UpdateStatementContext) UsingClause() IUsingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingClauseContext)
}

func (s *UpdateStatementContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IF, 0)
}

func (s *UpdateStatementContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_EXISTS, 0)
}

func (s *UpdateStatementContext) Conditions() IConditionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionsContext)
}

func (s *UpdateStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUpdateStatement(s)
	}
}

func (s *UpdateStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUpdateStatement(s)
	}
}

func (p *SimplifiedCqlParser) UpdateStatement() (localctx IUpdateStatementContext) {
	this := p
	_ = this

	localctx = NewUpdateStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, SimplifiedCqlParserRULE_updateStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(186)
		p.Match(SimplifiedCqlParserK_UPDATE)
	}
	{
		p.SetState(187)
		p.TableName()
	}
	p.SetState(189)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_USING {
		{
			p.SetState(188)
			p.UsingClause()
		}

	}
	{
		p.SetState(191)
		p.Match(SimplifiedCqlParserK_SET)
	}
	{
		p.SetState(192)
		p.UpdateOperations()
	}
	{
		p.SetState(193)
		p.WhereClause()
	}
	p.SetState(199)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_IF {
		{
			p.SetState(194)
			p.Match(SimplifiedCqlParserK_IF)
		}
		p.SetState(197)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(195)
				p.Match(SimplifiedCqlParserK_EXISTS)
			}

		case 2:
			{
				p.SetState(196)
				p.Conditions()
			}

		}

	}

	return localctx
}

// IUpdateOperationsContext is an interface to support dynamic dispatch.
type IUpdateOperationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdateOperationsContext differentiates from other interfaces.
	IsUpdateOperationsContext()
}

type UpdateOperationsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateOperationsContext() *UpdateOperationsContext {
	var p = new(UpdateOperationsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_updateOperations
	return p
}

func (*UpdateOperationsContext) IsUpdateOperationsContext() {}

func NewUpdateOperationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateOperationsContext {
	var p = new(UpdateOperationsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_updateOperations

	return p
}

func (s *UpdateOperationsContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateOperationsContext) AllUpdateOperation() []IUpdateOperationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdateOperationContext)(nil)).Elem())
	var tst = make([]IUpdateOperationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdateOperationContext)
		}
	}

	return tst
}

func (s *UpdateOperationsContext) UpdateOperation(i int) IUpdateOperationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateOperationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdateOperationContext)
}

func (s *UpdateOperationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateOperationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateOperationsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUpdateOperations(s)
	}
}

func (s *UpdateOperationsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUpdateOperations(s)
	}
}

func (p *SimplifiedCqlParser) UpdateOperations() (localctx IUpdateOperationsContext) {
	this := p
	_ = this

	localctx = NewUpdateOperationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, SimplifiedCqlParserRULE_updateOperations)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(201)
		p.UpdateOperation()
	}
	p.SetState(206)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(202)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(203)
			p.UpdateOperation()
		}

		p.SetState(208)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUpdateOperationContext is an interface to support dynamic dispatch.
type IUpdateOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdateOperationContext differentiates from other interfaces.
	IsUpdateOperationContext()
}

type UpdateOperationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdateOperationContext() *UpdateOperationContext {
	var p = new(UpdateOperationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_updateOperation
	return p
}

func (*UpdateOperationContext) IsUpdateOperationContext() {}

func NewUpdateOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UpdateOperationContext {
	var p = new(UpdateOperationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_updateOperation

	return p
}

func (s *UpdateOperationContext) GetParser() antlr.Parser { return s.parser }

func (s *UpdateOperationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *UpdateOperationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *UpdateOperationContext) AllTerm() []ITermContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITermContext)(nil)).Elem())
	var tst = make([]ITermContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITermContext)
		}
	}

	return tst
}

func (s *UpdateOperationContext) Term(i int) ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *UpdateOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UpdateOperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UpdateOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUpdateOperation(s)
	}
}

func (s *UpdateOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUpdateOperation(s)
	}
}

func (p *SimplifiedCqlParser) UpdateOperation() (localctx IUpdateOperationContext) {
	this := p
	_ = this

	localctx = NewUpdateOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, SimplifiedCqlParserRULE_updateOperation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(239)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(209)
			p.Identifier()
		}
		{
			p.SetState(210)
			p.Match(SimplifiedCqlParserT__3)
		}
		{
			p.SetState(211)
			p.Term()
		}
		p.SetState(214)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserT__4 {
			{
				p.SetState(212)
				p.Match(SimplifiedCqlParserT__4)
			}
			{
				p.SetState(213)
				p.Identifier()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(216)
			p.Identifier()
		}
		{
			p.SetState(217)
			p.Match(SimplifiedCqlParserT__3)
		}
		{
			p.SetState(218)
			p.Identifier()
		}
		{
			p.SetState(219)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SimplifiedCqlParserT__4 || _la == SimplifiedCqlParserT__5) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(220)
			p.Term()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(222)
			p.Identifier()
		}
		{
			p.SetState(223)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SimplifiedCqlParserT__6 || _la == SimplifiedCqlParserT__7) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(224)
			p.Term()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(226)
			p.Identifier()
		}
		{
			p.SetState(227)
			p.Match(SimplifiedCqlParserT__8)
		}
		{
			p.SetState(228)
			p.Term()
		}
		{
			p.SetState(229)
			p.Match(SimplifiedCqlParserT__9)
		}
		{
			p.SetState(230)
			p.Match(SimplifiedCqlParserT__3)
		}
		{
			p.SetState(231)
			p.Term()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(233)
			p.Identifier()
		}
		{
			p.SetState(234)
			p.Match(SimplifiedCqlParserT__10)
		}
		{
			p.SetState(235)
			p.Identifier()
		}
		{
			p.SetState(236)
			p.Match(SimplifiedCqlParserT__3)
		}
		{
			p.SetState(237)
			p.Term()
		}

	}

	return localctx
}

// IDeleteStatementContext is an interface to support dynamic dispatch.
type IDeleteStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeleteStatementContext differentiates from other interfaces.
	IsDeleteStatementContext()
}

type DeleteStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteStatementContext() *DeleteStatementContext {
	var p = new(DeleteStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_deleteStatement
	return p
}

func (*DeleteStatementContext) IsDeleteStatementContext() {}

func NewDeleteStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteStatementContext {
	var p = new(DeleteStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_deleteStatement

	return p
}

func (s *DeleteStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteStatementContext) K_DELETE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DELETE, 0)
}

func (s *DeleteStatementContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FROM, 0)
}

func (s *DeleteStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *DeleteStatementContext) WhereClause() IWhereClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *DeleteStatementContext) DeleteOperations() IDeleteOperationsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteOperationsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteOperationsContext)
}

func (s *DeleteStatementContext) K_USING() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_USING, 0)
}

func (s *DeleteStatementContext) Timestamp() ITimestampContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimestampContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimestampContext)
}

func (s *DeleteStatementContext) K_IF() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IF, 0)
}

func (s *DeleteStatementContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_EXISTS, 0)
}

func (s *DeleteStatementContext) Conditions() IConditionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionsContext)
}

func (s *DeleteStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterDeleteStatement(s)
	}
}

func (s *DeleteStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitDeleteStatement(s)
	}
}

func (p *SimplifiedCqlParser) DeleteStatement() (localctx IDeleteStatementContext) {
	this := p
	_ = this

	localctx = NewDeleteStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, SimplifiedCqlParserRULE_deleteStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(241)
		p.Match(SimplifiedCqlParserK_DELETE)
	}
	p.SetState(243)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(SimplifiedCqlParserK_PARTITION-70))|(1<<(SimplifiedCqlParserK_PER-70))|(1<<(SimplifiedCqlParserK_SMALLINT-70))|(1<<(SimplifiedCqlParserK_TEXT-70))|(1<<(SimplifiedCqlParserK_TIMESTAMP-70))|(1<<(SimplifiedCqlParserK_TIMEUUID-70))|(1<<(SimplifiedCqlParserK_TIME-70))|(1<<(SimplifiedCqlParserK_TINYINT-70))|(1<<(SimplifiedCqlParserK_TTL-70))|(1<<(SimplifiedCqlParserK_TUPLE-70))|(1<<(SimplifiedCqlParserK_TYPE-70))|(1<<(SimplifiedCqlParserK_UUID-70))|(1<<(SimplifiedCqlParserK_VALUES-70))|(1<<(SimplifiedCqlParserK_VARCHAR-70))|(1<<(SimplifiedCqlParserK_VARINT-70))|(1<<(SimplifiedCqlParserK_WRITETIME-70))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-70))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-70)))) != 0) {
		{
			p.SetState(242)
			p.DeleteOperations()
		}

	}
	{
		p.SetState(245)
		p.Match(SimplifiedCqlParserK_FROM)
	}
	{
		p.SetState(246)
		p.TableName()
	}
	p.SetState(249)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_USING {
		{
			p.SetState(247)
			p.Match(SimplifiedCqlParserK_USING)
		}
		{
			p.SetState(248)
			p.Timestamp()
		}

	}
	{
		p.SetState(251)
		p.WhereClause()
	}
	p.SetState(257)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_IF {
		{
			p.SetState(252)
			p.Match(SimplifiedCqlParserK_IF)
		}
		p.SetState(255)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(253)
				p.Match(SimplifiedCqlParserK_EXISTS)
			}

		case 2:
			{
				p.SetState(254)
				p.Conditions()
			}

		}

	}

	return localctx
}

// IDeleteOperationsContext is an interface to support dynamic dispatch.
type IDeleteOperationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeleteOperationsContext differentiates from other interfaces.
	IsDeleteOperationsContext()
}

type DeleteOperationsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteOperationsContext() *DeleteOperationsContext {
	var p = new(DeleteOperationsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_deleteOperations
	return p
}

func (*DeleteOperationsContext) IsDeleteOperationsContext() {}

func NewDeleteOperationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteOperationsContext {
	var p = new(DeleteOperationsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_deleteOperations

	return p
}

func (s *DeleteOperationsContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteOperationsContext) AllDeleteOperation() []IDeleteOperationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeleteOperationContext)(nil)).Elem())
	var tst = make([]IDeleteOperationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeleteOperationContext)
		}
	}

	return tst
}

func (s *DeleteOperationsContext) DeleteOperation(i int) IDeleteOperationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteOperationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeleteOperationContext)
}

func (s *DeleteOperationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteOperationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteOperationsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterDeleteOperations(s)
	}
}

func (s *DeleteOperationsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitDeleteOperations(s)
	}
}

func (p *SimplifiedCqlParser) DeleteOperations() (localctx IDeleteOperationsContext) {
	this := p
	_ = this

	localctx = NewDeleteOperationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, SimplifiedCqlParserRULE_deleteOperations)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(259)
		p.DeleteOperation()
	}
	p.SetState(264)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(260)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(261)
			p.DeleteOperation()
		}

		p.SetState(266)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDeleteOperationContext is an interface to support dynamic dispatch.
type IDeleteOperationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeleteOperationContext differentiates from other interfaces.
	IsDeleteOperationContext()
}

type DeleteOperationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeleteOperationContext() *DeleteOperationContext {
	var p = new(DeleteOperationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_deleteOperation
	return p
}

func (*DeleteOperationContext) IsDeleteOperationContext() {}

func NewDeleteOperationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeleteOperationContext {
	var p = new(DeleteOperationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_deleteOperation

	return p
}

func (s *DeleteOperationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeleteOperationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *DeleteOperationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DeleteOperationContext) Term() ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *DeleteOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeleteOperationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeleteOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterDeleteOperation(s)
	}
}

func (s *DeleteOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitDeleteOperation(s)
	}
}

func (p *SimplifiedCqlParser) DeleteOperation() (localctx IDeleteOperationContext) {
	this := p
	_ = this

	localctx = NewDeleteOperationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, SimplifiedCqlParserRULE_deleteOperation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(277)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(267)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(268)
			p.Identifier()
		}
		{
			p.SetState(269)
			p.Match(SimplifiedCqlParserT__8)
		}
		{
			p.SetState(270)
			p.Term()
		}
		{
			p.SetState(271)
			p.Match(SimplifiedCqlParserT__9)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(273)
			p.Identifier()
		}
		{
			p.SetState(274)
			p.Match(SimplifiedCqlParserT__10)
		}
		{
			p.SetState(275)
			p.Identifier()
		}

	}

	return localctx
}

// IBatchStatementContext is an interface to support dynamic dispatch.
type IBatchStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBatchStatementContext differentiates from other interfaces.
	IsBatchStatementContext()
}

type BatchStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBatchStatementContext() *BatchStatementContext {
	var p = new(BatchStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_batchStatement
	return p
}

func (*BatchStatementContext) IsBatchStatementContext() {}

func NewBatchStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BatchStatementContext {
	var p = new(BatchStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_batchStatement

	return p
}

func (s *BatchStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BatchStatementContext) K_BEGIN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BEGIN, 0)
}

func (s *BatchStatementContext) AllK_BATCH() []antlr.TerminalNode {
	return s.GetTokens(SimplifiedCqlParserK_BATCH)
}

func (s *BatchStatementContext) K_BATCH(i int) antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BATCH, i)
}

func (s *BatchStatementContext) K_APPLY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_APPLY, 0)
}

func (s *BatchStatementContext) UsingClause() IUsingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingClauseContext)
}

func (s *BatchStatementContext) AllBatchChildStatement() []IBatchChildStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBatchChildStatementContext)(nil)).Elem())
	var tst = make([]IBatchChildStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBatchChildStatementContext)
		}
	}

	return tst
}

func (s *BatchStatementContext) BatchChildStatement(i int) IBatchChildStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBatchChildStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBatchChildStatementContext)
}

func (s *BatchStatementContext) K_UNLOGGED() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_UNLOGGED, 0)
}

func (s *BatchStatementContext) K_COUNTER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_COUNTER, 0)
}

func (s *BatchStatementContext) AllEOS() []antlr.TerminalNode {
	return s.GetTokens(SimplifiedCqlParserEOS)
}

func (s *BatchStatementContext) EOS(i int) antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserEOS, i)
}

func (s *BatchStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BatchStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BatchStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterBatchStatement(s)
	}
}

func (s *BatchStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitBatchStatement(s)
	}
}

func (p *SimplifiedCqlParser) BatchStatement() (localctx IBatchStatementContext) {
	this := p
	_ = this

	localctx = NewBatchStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, SimplifiedCqlParserRULE_batchStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(279)
		p.Match(SimplifiedCqlParserK_BEGIN)
	}
	p.SetState(281)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_COUNTER || _la == SimplifiedCqlParserK_UNLOGGED {
		{
			p.SetState(280)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SimplifiedCqlParserK_COUNTER || _la == SimplifiedCqlParserK_UNLOGGED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(283)
		p.Match(SimplifiedCqlParserK_BATCH)
	}
	p.SetState(285)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_USING {
		{
			p.SetState(284)
			p.UsingClause()
		}

	}
	p.SetState(293)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserK_DELETE || _la == SimplifiedCqlParserK_INSERT || _la == SimplifiedCqlParserK_UPDATE {
		{
			p.SetState(287)
			p.BatchChildStatement()
		}
		p.SetState(289)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserEOS {
			{
				p.SetState(288)
				p.Match(SimplifiedCqlParserEOS)
			}

		}

		p.SetState(295)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(296)
		p.Match(SimplifiedCqlParserK_APPLY)
	}
	{
		p.SetState(297)
		p.Match(SimplifiedCqlParserK_BATCH)
	}

	return localctx
}

// IBatchChildStatementContext is an interface to support dynamic dispatch.
type IBatchChildStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBatchChildStatementContext differentiates from other interfaces.
	IsBatchChildStatementContext()
}

type BatchChildStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBatchChildStatementContext() *BatchChildStatementContext {
	var p = new(BatchChildStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_batchChildStatement
	return p
}

func (*BatchChildStatementContext) IsBatchChildStatementContext() {}

func NewBatchChildStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BatchChildStatementContext {
	var p = new(BatchChildStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_batchChildStatement

	return p
}

func (s *BatchChildStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BatchChildStatementContext) InsertStatement() IInsertStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsertStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsertStatementContext)
}

func (s *BatchChildStatementContext) UpdateStatement() IUpdateStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdateStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdateStatementContext)
}

func (s *BatchChildStatementContext) DeleteStatement() IDeleteStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeleteStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeleteStatementContext)
}

func (s *BatchChildStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BatchChildStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BatchChildStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterBatchChildStatement(s)
	}
}

func (s *BatchChildStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitBatchChildStatement(s)
	}
}

func (p *SimplifiedCqlParser) BatchChildStatement() (localctx IBatchChildStatementContext) {
	this := p
	_ = this

	localctx = NewBatchChildStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, SimplifiedCqlParserRULE_batchChildStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(302)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserK_INSERT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(299)
			p.InsertStatement()
		}

	case SimplifiedCqlParserK_UPDATE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(300)
			p.UpdateStatement()
		}

	case SimplifiedCqlParserK_DELETE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(301)
			p.DeleteStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelectStatementContext is an interface to support dynamic dispatch.
type ISelectStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectStatementContext differentiates from other interfaces.
	IsSelectStatementContext()
}

type SelectStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectStatementContext() *SelectStatementContext {
	var p = new(SelectStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_selectStatement
	return p
}

func (*SelectStatementContext) IsSelectStatementContext() {}

func NewSelectStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectStatementContext {
	var p = new(SelectStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_selectStatement

	return p
}

func (s *SelectStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectStatementContext) K_SELECT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_SELECT, 0)
}

func (s *SelectStatementContext) SelectClause() ISelectClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectClauseContext)
}

func (s *SelectStatementContext) K_FROM() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FROM, 0)
}

func (s *SelectStatementContext) TableName() ITableNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITableNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITableNameContext)
}

func (s *SelectStatementContext) K_JSON() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_JSON, 0)
}

func (s *SelectStatementContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DISTINCT, 0)
}

func (s *SelectStatementContext) WhereClause() IWhereClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *SelectStatementContext) GroupByClause() IGroupByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupByClauseContext)
}

func (s *SelectStatementContext) OrderByClause() IOrderByClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderByClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderByClauseContext)
}

func (s *SelectStatementContext) PerPartitionLimitClause() IPerPartitionLimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPerPartitionLimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPerPartitionLimitClauseContext)
}

func (s *SelectStatementContext) LimitClause() ILimitClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimitClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimitClauseContext)
}

func (s *SelectStatementContext) K_ALLOW() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_ALLOW, 0)
}

func (s *SelectStatementContext) K_FILTERING() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FILTERING, 0)
}

func (s *SelectStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterSelectStatement(s)
	}
}

func (s *SelectStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitSelectStatement(s)
	}
}

func (p *SimplifiedCqlParser) SelectStatement() (localctx ISelectStatementContext) {
	this := p
	_ = this

	localctx = NewSelectStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, SimplifiedCqlParserRULE_selectStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(304)
		p.Match(SimplifiedCqlParserK_SELECT)
	}
	p.SetState(306)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(305)
			p.Match(SimplifiedCqlParserK_JSON)
		}

	}
	p.SetState(309)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(308)
			p.Match(SimplifiedCqlParserK_DISTINCT)
		}

	}
	{
		p.SetState(311)
		p.SelectClause()
	}
	{
		p.SetState(312)
		p.Match(SimplifiedCqlParserK_FROM)
	}
	{
		p.SetState(313)
		p.TableName()
	}
	p.SetState(315)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_WHERE {
		{
			p.SetState(314)
			p.WhereClause()
		}

	}
	p.SetState(318)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_GROUP {
		{
			p.SetState(317)
			p.GroupByClause()
		}

	}
	p.SetState(321)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_ORDER {
		{
			p.SetState(320)
			p.OrderByClause()
		}

	}
	p.SetState(324)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_PER {
		{
			p.SetState(323)
			p.PerPartitionLimitClause()
		}

	}
	p.SetState(327)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_LIMIT {
		{
			p.SetState(326)
			p.LimitClause()
		}

	}
	p.SetState(331)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_ALLOW {
		{
			p.SetState(329)
			p.Match(SimplifiedCqlParserK_ALLOW)
		}
		{
			p.SetState(330)
			p.Match(SimplifiedCqlParserK_FILTERING)
		}

	}

	return localctx
}

// ISelectClauseContext is an interface to support dynamic dispatch.
type ISelectClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectClauseContext differentiates from other interfaces.
	IsSelectClauseContext()
}

type SelectClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectClauseContext() *SelectClauseContext {
	var p = new(SelectClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_selectClause
	return p
}

func (*SelectClauseContext) IsSelectClauseContext() {}

func NewSelectClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectClauseContext {
	var p = new(SelectClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_selectClause

	return p
}

func (s *SelectClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectClauseContext) Selectors() ISelectorsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectorsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectorsContext)
}

func (s *SelectClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterSelectClause(s)
	}
}

func (s *SelectClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitSelectClause(s)
	}
}

func (p *SimplifiedCqlParser) SelectClause() (localctx ISelectClauseContext) {
	this := p
	_ = this

	localctx = NewSelectClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, SimplifiedCqlParserRULE_selectClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(335)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserT__11:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(333)
			p.Match(SimplifiedCqlParserT__11)
		}

	case SimplifiedCqlParserT__0, SimplifiedCqlParserT__5, SimplifiedCqlParserT__8, SimplifiedCqlParserT__17, SimplifiedCqlParserT__18, SimplifiedCqlParserK_AS, SimplifiedCqlParserK_ASCII, SimplifiedCqlParserK_BIGINT, SimplifiedCqlParserK_BLOB, SimplifiedCqlParserK_BOOLEAN, SimplifiedCqlParserK_CAST, SimplifiedCqlParserK_CLUSTERING, SimplifiedCqlParserK_CONTAINS, SimplifiedCqlParserK_COUNTER, SimplifiedCqlParserK_COUNT, SimplifiedCqlParserK_DATE, SimplifiedCqlParserK_DECIMAL, SimplifiedCqlParserK_DISTINCT, SimplifiedCqlParserK_DOUBLE, SimplifiedCqlParserK_DURATION, SimplifiedCqlParserK_EXISTS, SimplifiedCqlParserK_FILTERING, SimplifiedCqlParserK_FLOAT, SimplifiedCqlParserK_FROZEN, SimplifiedCqlParserK_GROUP, SimplifiedCqlParserK_INET, SimplifiedCqlParserK_INFINITY, SimplifiedCqlParserK_INT, SimplifiedCqlParserK_JSON, SimplifiedCqlParserK_KEY, SimplifiedCqlParserK_LIKE, SimplifiedCqlParserK_LIST, SimplifiedCqlParserK_MAP, SimplifiedCqlParserK_NAN, SimplifiedCqlParserK_NULL, SimplifiedCqlParserK_PARTITION, SimplifiedCqlParserK_PER, SimplifiedCqlParserK_SMALLINT, SimplifiedCqlParserK_TEXT, SimplifiedCqlParserK_TIMESTAMP, SimplifiedCqlParserK_TIMEUUID, SimplifiedCqlParserK_TIME, SimplifiedCqlParserK_TINYINT, SimplifiedCqlParserK_TTL, SimplifiedCqlParserK_TUPLE, SimplifiedCqlParserK_TYPE, SimplifiedCqlParserK_UUID, SimplifiedCqlParserK_VALUES, SimplifiedCqlParserK_VARCHAR, SimplifiedCqlParserK_VARINT, SimplifiedCqlParserK_WRITETIME, SimplifiedCqlParserSTRING_LITERAL, SimplifiedCqlParserQUOTED_IDENTIFIER, SimplifiedCqlParserINTEGER, SimplifiedCqlParserQMARK, SimplifiedCqlParserFLOAT, SimplifiedCqlParserBOOLEAN, SimplifiedCqlParserDURATION, SimplifiedCqlParserUNQUOTED_IDENTIFIER, SimplifiedCqlParserHEXNUMBER, SimplifiedCqlParserUUID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(334)
			p.Selectors()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelectorsContext is an interface to support dynamic dispatch.
type ISelectorsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectorsContext differentiates from other interfaces.
	IsSelectorsContext()
}

type SelectorsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectorsContext() *SelectorsContext {
	var p = new(SelectorsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_selectors
	return p
}

func (*SelectorsContext) IsSelectorsContext() {}

func NewSelectorsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectorsContext {
	var p = new(SelectorsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_selectors

	return p
}

func (s *SelectorsContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectorsContext) AllSelector() []ISelectorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectorContext)(nil)).Elem())
	var tst = make([]ISelectorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectorContext)
		}
	}

	return tst
}

func (s *SelectorsContext) Selector(i int) ISelectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectorContext)
}

func (s *SelectorsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectorsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectorsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterSelectors(s)
	}
}

func (s *SelectorsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitSelectors(s)
	}
}

func (p *SimplifiedCqlParser) Selectors() (localctx ISelectorsContext) {
	this := p
	_ = this

	localctx = NewSelectorsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, SimplifiedCqlParserRULE_selectors)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(337)
		p.Selector()
	}
	p.SetState(342)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(338)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(339)
			p.Selector()
		}

		p.SetState(344)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISelectorContext is an interface to support dynamic dispatch.
type ISelectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectorContext differentiates from other interfaces.
	IsSelectorContext()
}

type SelectorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectorContext() *SelectorContext {
	var p = new(SelectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_selector
	return p
}

func (*SelectorContext) IsSelectorContext() {}

func NewSelectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectorContext {
	var p = new(SelectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_selector

	return p
}

func (s *SelectorContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectorContext) UnaliasedSelector() IUnaliasedSelectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaliasedSelectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaliasedSelectorContext)
}

func (s *SelectorContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AS, 0)
}

func (s *SelectorContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SelectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterSelector(s)
	}
}

func (s *SelectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitSelector(s)
	}
}

func (p *SimplifiedCqlParser) Selector() (localctx ISelectorContext) {
	this := p
	_ = this

	localctx = NewSelectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, SimplifiedCqlParserRULE_selector)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(345)
		p.UnaliasedSelector()
	}
	p.SetState(348)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_AS {
		{
			p.SetState(346)
			p.Match(SimplifiedCqlParserK_AS)
		}
		{
			p.SetState(347)
			p.Identifier()
		}

	}

	return localctx
}

// IUnaliasedSelectorContext is an interface to support dynamic dispatch.
type IUnaliasedSelectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaliasedSelectorContext differentiates from other interfaces.
	IsUnaliasedSelectorContext()
}

type UnaliasedSelectorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaliasedSelectorContext() *UnaliasedSelectorContext {
	var p = new(UnaliasedSelectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_unaliasedSelector
	return p
}

func (*UnaliasedSelectorContext) IsUnaliasedSelectorContext() {}

func NewUnaliasedSelectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaliasedSelectorContext {
	var p = new(UnaliasedSelectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_unaliasedSelector

	return p
}

func (s *UnaliasedSelectorContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaliasedSelectorContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *UnaliasedSelectorContext) Term() ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *UnaliasedSelectorContext) K_COUNT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_COUNT, 0)
}

func (s *UnaliasedSelectorContext) K_CAST() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_CAST, 0)
}

func (s *UnaliasedSelectorContext) UnaliasedSelector() IUnaliasedSelectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaliasedSelectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaliasedSelectorContext)
}

func (s *UnaliasedSelectorContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AS, 0)
}

func (s *UnaliasedSelectorContext) PrimitiveType() IPrimitiveTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitiveTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *UnaliasedSelectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaliasedSelectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaliasedSelectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUnaliasedSelector(s)
	}
}

func (s *UnaliasedSelectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUnaliasedSelector(s)
	}
}

func (p *SimplifiedCqlParser) UnaliasedSelector() (localctx IUnaliasedSelectorContext) {
	this := p
	_ = this

	localctx = NewUnaliasedSelectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, SimplifiedCqlParserRULE_unaliasedSelector)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(363)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(350)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(351)
			p.Term()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(352)
			p.Match(SimplifiedCqlParserK_COUNT)
		}
		{
			p.SetState(353)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(354)
			p.Match(SimplifiedCqlParserT__11)
		}
		{
			p.SetState(355)
			p.Match(SimplifiedCqlParserT__1)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(356)
			p.Match(SimplifiedCqlParserK_CAST)
		}
		{
			p.SetState(357)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(358)
			p.UnaliasedSelector()
		}
		{
			p.SetState(359)
			p.Match(SimplifiedCqlParserK_AS)
		}
		{
			p.SetState(360)
			p.PrimitiveType()
		}
		{
			p.SetState(361)
			p.Match(SimplifiedCqlParserT__1)
		}

	}

	return localctx
}

// IUseStatementContext is an interface to support dynamic dispatch.
type IUseStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUseStatementContext differentiates from other interfaces.
	IsUseStatementContext()
}

type UseStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUseStatementContext() *UseStatementContext {
	var p = new(UseStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_useStatement
	return p
}

func (*UseStatementContext) IsUseStatementContext() {}

func NewUseStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UseStatementContext {
	var p = new(UseStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_useStatement

	return p
}

func (s *UseStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UseStatementContext) K_USE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_USE, 0)
}

func (s *UseStatementContext) KeyspaceName() IKeyspaceNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyspaceNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeyspaceNameContext)
}

func (s *UseStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UseStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UseStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUseStatement(s)
	}
}

func (s *UseStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUseStatement(s)
	}
}

func (p *SimplifiedCqlParser) UseStatement() (localctx IUseStatementContext) {
	this := p
	_ = this

	localctx = NewUseStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, SimplifiedCqlParserRULE_useStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(365)
		p.Match(SimplifiedCqlParserK_USE)
	}
	{
		p.SetState(366)
		p.KeyspaceName()
	}

	return localctx
}

// IOrderByClauseContext is an interface to support dynamic dispatch.
type IOrderByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrderByClauseContext differentiates from other interfaces.
	IsOrderByClauseContext()
}

type OrderByClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderByClauseContext() *OrderByClauseContext {
	var p = new(OrderByClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_orderByClause
	return p
}

func (*OrderByClauseContext) IsOrderByClauseContext() {}

func NewOrderByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderByClauseContext {
	var p = new(OrderByClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_orderByClause

	return p
}

func (s *OrderByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderByClauseContext) K_ORDER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_ORDER, 0)
}

func (s *OrderByClauseContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BY, 0)
}

func (s *OrderByClauseContext) Orderings() IOrderingsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderingsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrderingsContext)
}

func (s *OrderByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterOrderByClause(s)
	}
}

func (s *OrderByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitOrderByClause(s)
	}
}

func (p *SimplifiedCqlParser) OrderByClause() (localctx IOrderByClauseContext) {
	this := p
	_ = this

	localctx = NewOrderByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, SimplifiedCqlParserRULE_orderByClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(368)
		p.Match(SimplifiedCqlParserK_ORDER)
	}
	{
		p.SetState(369)
		p.Match(SimplifiedCqlParserK_BY)
	}
	{
		p.SetState(370)
		p.Orderings()
	}

	return localctx
}

// IOrderingsContext is an interface to support dynamic dispatch.
type IOrderingsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrderingsContext differentiates from other interfaces.
	IsOrderingsContext()
}

type OrderingsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderingsContext() *OrderingsContext {
	var p = new(OrderingsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_orderings
	return p
}

func (*OrderingsContext) IsOrderingsContext() {}

func NewOrderingsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderingsContext {
	var p = new(OrderingsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_orderings

	return p
}

func (s *OrderingsContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderingsContext) AllOrdering() []IOrderingContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrderingContext)(nil)).Elem())
	var tst = make([]IOrderingContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrderingContext)
		}
	}

	return tst
}

func (s *OrderingsContext) Ordering(i int) IOrderingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrderingContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrderingContext)
}

func (s *OrderingsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderingsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderingsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterOrderings(s)
	}
}

func (s *OrderingsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitOrderings(s)
	}
}

func (p *SimplifiedCqlParser) Orderings() (localctx IOrderingsContext) {
	this := p
	_ = this

	localctx = NewOrderingsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, SimplifiedCqlParserRULE_orderings)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(372)
		p.Ordering()
	}
	p.SetState(377)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(373)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(374)
			p.Ordering()
		}

		p.SetState(379)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IOrderingContext is an interface to support dynamic dispatch.
type IOrderingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrderingContext differentiates from other interfaces.
	IsOrderingContext()
}

type OrderingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrderingContext() *OrderingContext {
	var p = new(OrderingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_ordering
	return p
}

func (*OrderingContext) IsOrderingContext() {}

func NewOrderingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OrderingContext {
	var p = new(OrderingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_ordering

	return p
}

func (s *OrderingContext) GetParser() antlr.Parser { return s.parser }

func (s *OrderingContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *OrderingContext) K_ASC() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_ASC, 0)
}

func (s *OrderingContext) K_DESC() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DESC, 0)
}

func (s *OrderingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OrderingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterOrdering(s)
	}
}

func (s *OrderingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitOrdering(s)
	}
}

func (p *SimplifiedCqlParser) Ordering() (localctx IOrderingContext) {
	this := p
	_ = this

	localctx = NewOrderingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, SimplifiedCqlParserRULE_ordering)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(380)
		p.Identifier()
	}
	p.SetState(382)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SimplifiedCqlParserK_ASC || _la == SimplifiedCqlParserK_DESC {
		{
			p.SetState(381)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SimplifiedCqlParserK_ASC || _la == SimplifiedCqlParserK_DESC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IGroupByClauseContext is an interface to support dynamic dispatch.
type IGroupByClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupByClauseContext differentiates from other interfaces.
	IsGroupByClauseContext()
}

type GroupByClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupByClauseContext() *GroupByClauseContext {
	var p = new(GroupByClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_groupByClause
	return p
}

func (*GroupByClauseContext) IsGroupByClauseContext() {}

func NewGroupByClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupByClauseContext {
	var p = new(GroupByClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_groupByClause

	return p
}

func (s *GroupByClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupByClauseContext) K_GROUP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_GROUP, 0)
}

func (s *GroupByClauseContext) K_BY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BY, 0)
}

func (s *GroupByClauseContext) Identifiers() IIdentifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifiersContext)
}

func (s *GroupByClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupByClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupByClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterGroupByClause(s)
	}
}

func (s *GroupByClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitGroupByClause(s)
	}
}

func (p *SimplifiedCqlParser) GroupByClause() (localctx IGroupByClauseContext) {
	this := p
	_ = this

	localctx = NewGroupByClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, SimplifiedCqlParserRULE_groupByClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(384)
		p.Match(SimplifiedCqlParserK_GROUP)
	}
	{
		p.SetState(385)
		p.Match(SimplifiedCqlParserK_BY)
	}
	{
		p.SetState(386)
		p.Identifiers()
	}

	return localctx
}

// IPerPartitionLimitClauseContext is an interface to support dynamic dispatch.
type IPerPartitionLimitClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPerPartitionLimitClauseContext differentiates from other interfaces.
	IsPerPartitionLimitClauseContext()
}

type PerPartitionLimitClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPerPartitionLimitClauseContext() *PerPartitionLimitClauseContext {
	var p = new(PerPartitionLimitClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_perPartitionLimitClause
	return p
}

func (*PerPartitionLimitClauseContext) IsPerPartitionLimitClauseContext() {}

func NewPerPartitionLimitClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PerPartitionLimitClauseContext {
	var p = new(PerPartitionLimitClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_perPartitionLimitClause

	return p
}

func (s *PerPartitionLimitClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *PerPartitionLimitClauseContext) K_PER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_PER, 0)
}

func (s *PerPartitionLimitClauseContext) K_PARTITION() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_PARTITION, 0)
}

func (s *PerPartitionLimitClauseContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIMIT, 0)
}

func (s *PerPartitionLimitClauseContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserINTEGER, 0)
}

func (s *PerPartitionLimitClauseContext) BindMarker() IBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *PerPartitionLimitClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PerPartitionLimitClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PerPartitionLimitClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterPerPartitionLimitClause(s)
	}
}

func (s *PerPartitionLimitClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitPerPartitionLimitClause(s)
	}
}

func (p *SimplifiedCqlParser) PerPartitionLimitClause() (localctx IPerPartitionLimitClauseContext) {
	this := p
	_ = this

	localctx = NewPerPartitionLimitClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, SimplifiedCqlParserRULE_perPartitionLimitClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(388)
		p.Match(SimplifiedCqlParserK_PER)
	}
	{
		p.SetState(389)
		p.Match(SimplifiedCqlParserK_PARTITION)
	}
	{
		p.SetState(390)
		p.Match(SimplifiedCqlParserK_LIMIT)
	}
	p.SetState(393)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserINTEGER:
		{
			p.SetState(391)
			p.Match(SimplifiedCqlParserINTEGER)
		}

	case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
		{
			p.SetState(392)
			p.BindMarker()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILimitClauseContext is an interface to support dynamic dispatch.
type ILimitClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLimitClauseContext differentiates from other interfaces.
	IsLimitClauseContext()
}

type LimitClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimitClauseContext() *LimitClauseContext {
	var p = new(LimitClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_limitClause
	return p
}

func (*LimitClauseContext) IsLimitClauseContext() {}

func NewLimitClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LimitClauseContext {
	var p = new(LimitClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_limitClause

	return p
}

func (s *LimitClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *LimitClauseContext) K_LIMIT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIMIT, 0)
}

func (s *LimitClauseContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserINTEGER, 0)
}

func (s *LimitClauseContext) BindMarker() IBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *LimitClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LimitClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LimitClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterLimitClause(s)
	}
}

func (s *LimitClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitLimitClause(s)
	}
}

func (p *SimplifiedCqlParser) LimitClause() (localctx ILimitClauseContext) {
	this := p
	_ = this

	localctx = NewLimitClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, SimplifiedCqlParserRULE_limitClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(395)
		p.Match(SimplifiedCqlParserK_LIMIT)
	}
	p.SetState(398)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserINTEGER:
		{
			p.SetState(396)
			p.Match(SimplifiedCqlParserINTEGER)
		}

	case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
		{
			p.SetState(397)
			p.BindMarker()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUsingClauseContext is an interface to support dynamic dispatch.
type IUsingClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUsingClauseContext differentiates from other interfaces.
	IsUsingClauseContext()
}

type UsingClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsingClauseContext() *UsingClauseContext {
	var p = new(UsingClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_usingClause
	return p
}

func (*UsingClauseContext) IsUsingClauseContext() {}

func NewUsingClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsingClauseContext {
	var p = new(UsingClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_usingClause

	return p
}

func (s *UsingClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *UsingClauseContext) K_USING() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_USING, 0)
}

func (s *UsingClauseContext) Timestamp() ITimestampContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimestampContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimestampContext)
}

func (s *UsingClauseContext) Ttl() ITtlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITtlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITtlContext)
}

func (s *UsingClauseContext) K_AND() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AND, 0)
}

func (s *UsingClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsingClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UsingClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUsingClause(s)
	}
}

func (s *UsingClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUsingClause(s)
	}
}

func (p *SimplifiedCqlParser) UsingClause() (localctx IUsingClauseContext) {
	this := p
	_ = this

	localctx = NewUsingClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, SimplifiedCqlParserRULE_usingClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(414)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(400)
			p.Match(SimplifiedCqlParserK_USING)
		}
		{
			p.SetState(401)
			p.Timestamp()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(402)
			p.Match(SimplifiedCqlParserK_USING)
		}
		{
			p.SetState(403)
			p.Ttl()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(404)
			p.Match(SimplifiedCqlParserK_USING)
		}
		{
			p.SetState(405)
			p.Timestamp()
		}
		{
			p.SetState(406)
			p.Match(SimplifiedCqlParserK_AND)
		}
		{
			p.SetState(407)
			p.Ttl()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(409)
			p.Match(SimplifiedCqlParserK_USING)
		}
		{
			p.SetState(410)
			p.Ttl()
		}
		{
			p.SetState(411)
			p.Match(SimplifiedCqlParserK_AND)
		}
		{
			p.SetState(412)
			p.Timestamp()
		}

	}

	return localctx
}

// ITimestampContext is an interface to support dynamic dispatch.
type ITimestampContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimestampContext differentiates from other interfaces.
	IsTimestampContext()
}

type TimestampContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimestampContext() *TimestampContext {
	var p = new(TimestampContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_timestamp
	return p
}

func (*TimestampContext) IsTimestampContext() {}

func NewTimestampContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TimestampContext {
	var p = new(TimestampContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_timestamp

	return p
}

func (s *TimestampContext) GetParser() antlr.Parser { return s.parser }

func (s *TimestampContext) K_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TIMESTAMP, 0)
}

func (s *TimestampContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserINTEGER, 0)
}

func (s *TimestampContext) BindMarker() IBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *TimestampContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimestampContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TimestampContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTimestamp(s)
	}
}

func (s *TimestampContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTimestamp(s)
	}
}

func (p *SimplifiedCqlParser) Timestamp() (localctx ITimestampContext) {
	this := p
	_ = this

	localctx = NewTimestampContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, SimplifiedCqlParserRULE_timestamp)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(416)
		p.Match(SimplifiedCqlParserK_TIMESTAMP)
	}
	p.SetState(419)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserINTEGER:
		{
			p.SetState(417)
			p.Match(SimplifiedCqlParserINTEGER)
		}

	case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
		{
			p.SetState(418)
			p.BindMarker()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITtlContext is an interface to support dynamic dispatch.
type ITtlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTtlContext differentiates from other interfaces.
	IsTtlContext()
}

type TtlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTtlContext() *TtlContext {
	var p = new(TtlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_ttl
	return p
}

func (*TtlContext) IsTtlContext() {}

func NewTtlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TtlContext {
	var p = new(TtlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_ttl

	return p
}

func (s *TtlContext) GetParser() antlr.Parser { return s.parser }

func (s *TtlContext) K_TTL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TTL, 0)
}

func (s *TtlContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserINTEGER, 0)
}

func (s *TtlContext) BindMarker() IBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *TtlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TtlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TtlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTtl(s)
	}
}

func (s *TtlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTtl(s)
	}
}

func (p *SimplifiedCqlParser) Ttl() (localctx ITtlContext) {
	this := p
	_ = this

	localctx = NewTtlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, SimplifiedCqlParserRULE_ttl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(421)
		p.Match(SimplifiedCqlParserK_TTL)
	}
	p.SetState(424)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserINTEGER:
		{
			p.SetState(422)
			p.Match(SimplifiedCqlParserINTEGER)
		}

	case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
		{
			p.SetState(423)
			p.BindMarker()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConditionsContext is an interface to support dynamic dispatch.
type IConditionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionsContext differentiates from other interfaces.
	IsConditionsContext()
}

type ConditionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionsContext() *ConditionsContext {
	var p = new(ConditionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_conditions
	return p
}

func (*ConditionsContext) IsConditionsContext() {}

func NewConditionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionsContext {
	var p = new(ConditionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_conditions

	return p
}

func (s *ConditionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionsContext) AllCondition() []IConditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConditionContext)(nil)).Elem())
	var tst = make([]IConditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConditionContext)
		}
	}

	return tst
}

func (s *ConditionsContext) Condition(i int) IConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConditionContext)
}

func (s *ConditionsContext) AllK_AND() []antlr.TerminalNode {
	return s.GetTokens(SimplifiedCqlParserK_AND)
}

func (s *ConditionsContext) K_AND(i int) antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AND, i)
}

func (s *ConditionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterConditions(s)
	}
}

func (s *ConditionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitConditions(s)
	}
}

func (p *SimplifiedCqlParser) Conditions() (localctx IConditionsContext) {
	this := p
	_ = this

	localctx = NewConditionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, SimplifiedCqlParserRULE_conditions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(426)
		p.Condition()
	}
	p.SetState(431)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserK_AND {
		{
			p.SetState(427)
			p.Match(SimplifiedCqlParserK_AND)
		}
		{
			p.SetState(428)
			p.Condition()
		}

		p.SetState(433)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IConditionContext is an interface to support dynamic dispatch.
type IConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionContext differentiates from other interfaces.
	IsConditionContext()
}

type ConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionContext() *ConditionContext {
	var p = new(ConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_condition
	return p
}

func (*ConditionContext) IsConditionContext() {}

func NewConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionContext {
	var p = new(ConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_condition

	return p
}

func (s *ConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ConditionContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ConditionContext) Operator() IOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *ConditionContext) AllTerm() []ITermContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITermContext)(nil)).Elem())
	var tst = make([]ITermContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITermContext)
		}
	}

	return tst
}

func (s *ConditionContext) Term(i int) ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *ConditionContext) K_IN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IN, 0)
}

func (s *ConditionContext) BindMarker() IBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *ConditionContext) Terms() ITermsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *ConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterCondition(s)
	}
}

func (s *ConditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitCondition(s)
	}
}

func (p *SimplifiedCqlParser) Condition() (localctx IConditionContext) {
	this := p
	_ = this

	localctx = NewConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, SimplifiedCqlParserRULE_condition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(486)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(434)
			p.Identifier()
		}
		{
			p.SetState(435)
			p.Operator()
		}
		{
			p.SetState(436)
			p.Term()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(438)
			p.Identifier()
		}
		{
			p.SetState(439)
			p.Match(SimplifiedCqlParserK_IN)
		}
		p.SetState(446)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SimplifiedCqlParserT__0:
			{
				p.SetState(440)
				p.Match(SimplifiedCqlParserT__0)
			}
			p.SetState(442)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__0)|(1<<SimplifiedCqlParserT__5)|(1<<SimplifiedCqlParserT__8)|(1<<SimplifiedCqlParserT__17)|(1<<SimplifiedCqlParserT__18)|(1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INFINITY-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(SimplifiedCqlParserK_NAN-65))|(1<<(SimplifiedCqlParserK_NULL-65))|(1<<(SimplifiedCqlParserK_PARTITION-65))|(1<<(SimplifiedCqlParserK_PER-65))|(1<<(SimplifiedCqlParserK_SMALLINT-65))|(1<<(SimplifiedCqlParserK_TEXT-65))|(1<<(SimplifiedCqlParserK_TIMESTAMP-65))|(1<<(SimplifiedCqlParserK_TIMEUUID-65))|(1<<(SimplifiedCqlParserK_TIME-65))|(1<<(SimplifiedCqlParserK_TINYINT-65))|(1<<(SimplifiedCqlParserK_TTL-65))|(1<<(SimplifiedCqlParserK_TUPLE-65))|(1<<(SimplifiedCqlParserK_TYPE-65))|(1<<(SimplifiedCqlParserK_UUID-65))|(1<<(SimplifiedCqlParserK_VALUES-65))|(1<<(SimplifiedCqlParserK_VARCHAR-65))|(1<<(SimplifiedCqlParserK_VARINT-65))|(1<<(SimplifiedCqlParserK_WRITETIME-65))|(1<<(SimplifiedCqlParserSTRING_LITERAL-65))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-65))|(1<<(SimplifiedCqlParserINTEGER-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(SimplifiedCqlParserQMARK-97))|(1<<(SimplifiedCqlParserFLOAT-97))|(1<<(SimplifiedCqlParserBOOLEAN-97))|(1<<(SimplifiedCqlParserDURATION-97))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-97))|(1<<(SimplifiedCqlParserHEXNUMBER-97))|(1<<(SimplifiedCqlParserUUID-97)))) != 0) {
				{
					p.SetState(441)
					p.Terms()
				}

			}
			{
				p.SetState(444)
				p.Match(SimplifiedCqlParserT__1)
			}

		case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
			{
				p.SetState(445)
				p.BindMarker()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(448)
			p.Identifier()
		}
		{
			p.SetState(449)
			p.Match(SimplifiedCqlParserT__8)
		}
		{
			p.SetState(450)
			p.Term()
		}
		{
			p.SetState(451)
			p.Match(SimplifiedCqlParserT__9)
		}
		{
			p.SetState(452)
			p.Operator()
		}
		{
			p.SetState(453)
			p.Term()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(455)
			p.Identifier()
		}
		{
			p.SetState(456)
			p.Match(SimplifiedCqlParserT__8)
		}
		{
			p.SetState(457)
			p.Term()
		}
		{
			p.SetState(458)
			p.Match(SimplifiedCqlParserT__9)
		}
		{
			p.SetState(459)
			p.Match(SimplifiedCqlParserK_IN)
		}
		p.SetState(466)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SimplifiedCqlParserT__0:
			{
				p.SetState(460)
				p.Match(SimplifiedCqlParserT__0)
			}
			p.SetState(462)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__0)|(1<<SimplifiedCqlParserT__5)|(1<<SimplifiedCqlParserT__8)|(1<<SimplifiedCqlParserT__17)|(1<<SimplifiedCqlParserT__18)|(1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INFINITY-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(SimplifiedCqlParserK_NAN-65))|(1<<(SimplifiedCqlParserK_NULL-65))|(1<<(SimplifiedCqlParserK_PARTITION-65))|(1<<(SimplifiedCqlParserK_PER-65))|(1<<(SimplifiedCqlParserK_SMALLINT-65))|(1<<(SimplifiedCqlParserK_TEXT-65))|(1<<(SimplifiedCqlParserK_TIMESTAMP-65))|(1<<(SimplifiedCqlParserK_TIMEUUID-65))|(1<<(SimplifiedCqlParserK_TIME-65))|(1<<(SimplifiedCqlParserK_TINYINT-65))|(1<<(SimplifiedCqlParserK_TTL-65))|(1<<(SimplifiedCqlParserK_TUPLE-65))|(1<<(SimplifiedCqlParserK_TYPE-65))|(1<<(SimplifiedCqlParserK_UUID-65))|(1<<(SimplifiedCqlParserK_VALUES-65))|(1<<(SimplifiedCqlParserK_VARCHAR-65))|(1<<(SimplifiedCqlParserK_VARINT-65))|(1<<(SimplifiedCqlParserK_WRITETIME-65))|(1<<(SimplifiedCqlParserSTRING_LITERAL-65))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-65))|(1<<(SimplifiedCqlParserINTEGER-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(SimplifiedCqlParserQMARK-97))|(1<<(SimplifiedCqlParserFLOAT-97))|(1<<(SimplifiedCqlParserBOOLEAN-97))|(1<<(SimplifiedCqlParserDURATION-97))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-97))|(1<<(SimplifiedCqlParserHEXNUMBER-97))|(1<<(SimplifiedCqlParserUUID-97)))) != 0) {
				{
					p.SetState(461)
					p.Terms()
				}

			}
			{
				p.SetState(464)
				p.Match(SimplifiedCqlParserT__1)
			}

		case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
			{
				p.SetState(465)
				p.BindMarker()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(468)
			p.Identifier()
		}
		{
			p.SetState(469)
			p.Match(SimplifiedCqlParserT__10)
		}
		{
			p.SetState(470)
			p.Identifier()
		}
		{
			p.SetState(471)
			p.Operator()
		}
		{
			p.SetState(472)
			p.Term()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(474)
			p.Identifier()
		}
		{
			p.SetState(475)
			p.Match(SimplifiedCqlParserT__10)
		}
		{
			p.SetState(476)
			p.Identifier()
		}
		{
			p.SetState(477)
			p.Match(SimplifiedCqlParserK_IN)
		}
		p.SetState(484)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SimplifiedCqlParserT__0:
			{
				p.SetState(478)
				p.Match(SimplifiedCqlParserT__0)
			}
			p.SetState(480)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__0)|(1<<SimplifiedCqlParserT__5)|(1<<SimplifiedCqlParserT__8)|(1<<SimplifiedCqlParserT__17)|(1<<SimplifiedCqlParserT__18)|(1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INFINITY-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(SimplifiedCqlParserK_NAN-65))|(1<<(SimplifiedCqlParserK_NULL-65))|(1<<(SimplifiedCqlParserK_PARTITION-65))|(1<<(SimplifiedCqlParserK_PER-65))|(1<<(SimplifiedCqlParserK_SMALLINT-65))|(1<<(SimplifiedCqlParserK_TEXT-65))|(1<<(SimplifiedCqlParserK_TIMESTAMP-65))|(1<<(SimplifiedCqlParserK_TIMEUUID-65))|(1<<(SimplifiedCqlParserK_TIME-65))|(1<<(SimplifiedCqlParserK_TINYINT-65))|(1<<(SimplifiedCqlParserK_TTL-65))|(1<<(SimplifiedCqlParserK_TUPLE-65))|(1<<(SimplifiedCqlParserK_TYPE-65))|(1<<(SimplifiedCqlParserK_UUID-65))|(1<<(SimplifiedCqlParserK_VALUES-65))|(1<<(SimplifiedCqlParserK_VARCHAR-65))|(1<<(SimplifiedCqlParserK_VARINT-65))|(1<<(SimplifiedCqlParserK_WRITETIME-65))|(1<<(SimplifiedCqlParserSTRING_LITERAL-65))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-65))|(1<<(SimplifiedCqlParserINTEGER-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(SimplifiedCqlParserQMARK-97))|(1<<(SimplifiedCqlParserFLOAT-97))|(1<<(SimplifiedCqlParserBOOLEAN-97))|(1<<(SimplifiedCqlParserDURATION-97))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-97))|(1<<(SimplifiedCqlParserHEXNUMBER-97))|(1<<(SimplifiedCqlParserUUID-97)))) != 0) {
				{
					p.SetState(479)
					p.Terms()
				}

			}
			{
				p.SetState(482)
				p.Match(SimplifiedCqlParserT__1)
			}

		case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
			{
				p.SetState(483)
				p.BindMarker()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// IWhereClauseContext is an interface to support dynamic dispatch.
type IWhereClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhereClauseContext differentiates from other interfaces.
	IsWhereClauseContext()
}

type WhereClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhereClauseContext() *WhereClauseContext {
	var p = new(WhereClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_whereClause
	return p
}

func (*WhereClauseContext) IsWhereClauseContext() {}

func NewWhereClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhereClauseContext {
	var p = new(WhereClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_whereClause

	return p
}

func (s *WhereClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WhereClauseContext) K_WHERE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_WHERE, 0)
}

func (s *WhereClauseContext) WhereExpression() IWhereExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhereExpressionContext)
}

func (s *WhereClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhereClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhereClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterWhereClause(s)
	}
}

func (s *WhereClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitWhereClause(s)
	}
}

func (p *SimplifiedCqlParser) WhereClause() (localctx IWhereClauseContext) {
	this := p
	_ = this

	localctx = NewWhereClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, SimplifiedCqlParserRULE_whereClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(488)
		p.Match(SimplifiedCqlParserK_WHERE)
	}
	{
		p.SetState(489)
		p.whereExpression(0)
	}

	return localctx
}

// IWhereExpressionContext is an interface to support dynamic dispatch.
type IWhereExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhereExpressionContext differentiates from other interfaces.
	IsWhereExpressionContext()
}

type WhereExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhereExpressionContext() *WhereExpressionContext {
	var p = new(WhereExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_whereExpression
	return p
}

func (*WhereExpressionContext) IsWhereExpressionContext() {}

func NewWhereExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhereExpressionContext {
	var p = new(WhereExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_whereExpression

	return p
}

func (s *WhereExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *WhereExpressionContext) Relation() IRelationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *WhereExpressionContext) AllWhereExpression() []IWhereExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWhereExpressionContext)(nil)).Elem())
	var tst = make([]IWhereExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWhereExpressionContext)
		}
	}

	return tst
}

func (s *WhereExpressionContext) WhereExpression(i int) IWhereExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhereExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWhereExpressionContext)
}

func (s *WhereExpressionContext) LogicalOperator() ILogicalOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalOperatorContext)
}

func (s *WhereExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhereExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhereExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterWhereExpression(s)
	}
}

func (s *WhereExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitWhereExpression(s)
	}
}

func (p *SimplifiedCqlParser) WhereExpression() (localctx IWhereExpressionContext) {
	return p.whereExpression(0)
}

func (p *SimplifiedCqlParser) whereExpression(_p int) (localctx IWhereExpressionContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewWhereExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IWhereExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 56
	p.EnterRecursionRule(localctx, 56, SimplifiedCqlParserRULE_whereExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(497)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(492)
			p.Relation()
		}

	case 2:
		{
			p.SetState(493)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(494)
			p.whereExpression(0)
		}
		{
			p.SetState(495)
			p.Match(SimplifiedCqlParserT__1)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(505)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewWhereExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, SimplifiedCqlParserRULE_whereExpression)
			p.SetState(499)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(500)
				p.LogicalOperator()
			}
			{
				p.SetState(501)
				p.whereExpression(2)
			}

		}
		p.SetState(507)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalOperatorContext is an interface to support dynamic dispatch.
type ILogicalOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalOperatorContext differentiates from other interfaces.
	IsLogicalOperatorContext()
}

type LogicalOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalOperatorContext() *LogicalOperatorContext {
	var p = new(LogicalOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_logicalOperator
	return p
}

func (*LogicalOperatorContext) IsLogicalOperatorContext() {}

func NewLogicalOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalOperatorContext {
	var p = new(LogicalOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_logicalOperator

	return p
}

func (s *LogicalOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalOperatorContext) K_AND() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AND, 0)
}

func (s *LogicalOperatorContext) K_OR() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_OR, 0)
}

func (s *LogicalOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterLogicalOperator(s)
	}
}

func (s *LogicalOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitLogicalOperator(s)
	}
}

func (p *SimplifiedCqlParser) LogicalOperator() (localctx ILogicalOperatorContext) {
	this := p
	_ = this

	localctx = NewLogicalOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, SimplifiedCqlParserRULE_logicalOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(508)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SimplifiedCqlParserK_AND || _la == SimplifiedCqlParserK_OR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IRelationContext is an interface to support dynamic dispatch.
type IRelationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationContext differentiates from other interfaces.
	IsRelationContext()
}

type RelationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationContext() *RelationContext {
	var p = new(RelationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_relation
	return p
}

func (*RelationContext) IsRelationContext() {}

func NewRelationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationContext {
	var p = new(RelationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_relation

	return p
}

func (s *RelationContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *RelationContext) Operator() IOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *RelationContext) AllTerm() []ITermContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITermContext)(nil)).Elem())
	var tst = make([]ITermContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITermContext)
		}
	}

	return tst
}

func (s *RelationContext) Term(i int) ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *RelationContext) K_TOKEN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TOKEN, 0)
}

func (s *RelationContext) Identifiers() IIdentifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifiersContext)
}

func (s *RelationContext) K_LIKE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIKE, 0)
}

func (s *RelationContext) K_IS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IS, 0)
}

func (s *RelationContext) K_NOT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_NOT, 0)
}

func (s *RelationContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_NULL, 0)
}

func (s *RelationContext) K_CONTAINS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_CONTAINS, 0)
}

func (s *RelationContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_KEY, 0)
}

func (s *RelationContext) K_IN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_IN, 0)
}

func (s *RelationContext) BindMarker() IBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *RelationContext) Terms() ITermsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *RelationContext) TupleLiterals() ITupleLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleLiteralsContext)
}

func (s *RelationContext) BindMarkers() IBindMarkersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindMarkersContext)
}

func (s *RelationContext) TupleLiteral() ITupleLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleLiteralContext)
}

func (s *RelationContext) Relation() IRelationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *RelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RelationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterRelation(s)
	}
}

func (s *RelationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitRelation(s)
	}
}

func (p *SimplifiedCqlParser) Relation() (localctx IRelationContext) {
	this := p
	_ = this

	localctx = NewRelationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, SimplifiedCqlParserRULE_relation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(607)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(510)
			p.Identifier()
		}
		{
			p.SetState(511)
			p.Operator()
		}
		{
			p.SetState(512)
			p.Term()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(514)
			p.Match(SimplifiedCqlParserK_TOKEN)
		}
		{
			p.SetState(515)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(516)
			p.Identifiers()
		}
		{
			p.SetState(517)
			p.Match(SimplifiedCqlParserT__1)
		}
		{
			p.SetState(518)
			p.Operator()
		}
		{
			p.SetState(519)
			p.Term()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(521)
			p.Identifier()
		}
		{
			p.SetState(522)
			p.Match(SimplifiedCqlParserK_LIKE)
		}
		{
			p.SetState(523)
			p.Term()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(525)
			p.Identifier()
		}
		{
			p.SetState(526)
			p.Match(SimplifiedCqlParserK_IS)
		}
		{
			p.SetState(527)
			p.Match(SimplifiedCqlParserK_NOT)
		}
		{
			p.SetState(528)
			p.Match(SimplifiedCqlParserK_NULL)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(530)
			p.Identifier()
		}
		{
			p.SetState(531)
			p.Match(SimplifiedCqlParserK_CONTAINS)
		}
		p.SetState(533)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(532)
				p.Match(SimplifiedCqlParserK_KEY)
			}

		}
		{
			p.SetState(535)
			p.Term()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(537)
			p.Identifier()
		}
		{
			p.SetState(538)
			p.Match(SimplifiedCqlParserT__8)
		}
		{
			p.SetState(539)
			p.Term()
		}
		{
			p.SetState(540)
			p.Match(SimplifiedCqlParserT__9)
		}
		{
			p.SetState(541)
			p.Operator()
		}
		{
			p.SetState(542)
			p.Term()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(544)
			p.Identifier()
		}
		{
			p.SetState(545)
			p.Match(SimplifiedCqlParserK_IN)
		}
		p.SetState(552)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SimplifiedCqlParserT__0:
			{
				p.SetState(546)
				p.Match(SimplifiedCqlParserT__0)
			}
			p.SetState(548)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__0)|(1<<SimplifiedCqlParserT__5)|(1<<SimplifiedCqlParserT__8)|(1<<SimplifiedCqlParserT__17)|(1<<SimplifiedCqlParserT__18)|(1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INFINITY-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(SimplifiedCqlParserK_NAN-65))|(1<<(SimplifiedCqlParserK_NULL-65))|(1<<(SimplifiedCqlParserK_PARTITION-65))|(1<<(SimplifiedCqlParserK_PER-65))|(1<<(SimplifiedCqlParserK_SMALLINT-65))|(1<<(SimplifiedCqlParserK_TEXT-65))|(1<<(SimplifiedCqlParserK_TIMESTAMP-65))|(1<<(SimplifiedCqlParserK_TIMEUUID-65))|(1<<(SimplifiedCqlParserK_TIME-65))|(1<<(SimplifiedCqlParserK_TINYINT-65))|(1<<(SimplifiedCqlParserK_TTL-65))|(1<<(SimplifiedCqlParserK_TUPLE-65))|(1<<(SimplifiedCqlParserK_TYPE-65))|(1<<(SimplifiedCqlParserK_UUID-65))|(1<<(SimplifiedCqlParserK_VALUES-65))|(1<<(SimplifiedCqlParserK_VARCHAR-65))|(1<<(SimplifiedCqlParserK_VARINT-65))|(1<<(SimplifiedCqlParserK_WRITETIME-65))|(1<<(SimplifiedCqlParserSTRING_LITERAL-65))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-65))|(1<<(SimplifiedCqlParserINTEGER-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(SimplifiedCqlParserQMARK-97))|(1<<(SimplifiedCqlParserFLOAT-97))|(1<<(SimplifiedCqlParserBOOLEAN-97))|(1<<(SimplifiedCqlParserDURATION-97))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-97))|(1<<(SimplifiedCqlParserHEXNUMBER-97))|(1<<(SimplifiedCqlParserUUID-97)))) != 0) {
				{
					p.SetState(547)
					p.Terms()
				}

			}
			{
				p.SetState(550)
				p.Match(SimplifiedCqlParserT__1)
			}

		case SimplifiedCqlParserT__17, SimplifiedCqlParserQMARK:
			{
				p.SetState(551)
				p.BindMarker()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(554)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(555)
			p.Identifiers()
		}
		{
			p.SetState(556)
			p.Match(SimplifiedCqlParserT__1)
		}
		{
			p.SetState(557)
			p.Match(SimplifiedCqlParserK_IN)
		}
		{
			p.SetState(558)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(559)
			p.Match(SimplifiedCqlParserT__1)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(561)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(562)
			p.Identifiers()
		}
		{
			p.SetState(563)
			p.Match(SimplifiedCqlParserT__1)
		}
		{
			p.SetState(564)
			p.Match(SimplifiedCqlParserK_IN)
		}
		{
			p.SetState(565)
			p.BindMarker()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(567)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(568)
			p.Identifiers()
		}
		{
			p.SetState(569)
			p.Match(SimplifiedCqlParserT__1)
		}
		{
			p.SetState(570)
			p.Match(SimplifiedCqlParserK_IN)
		}
		{
			p.SetState(571)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(572)
			p.TupleLiterals()
		}
		{
			p.SetState(573)
			p.Match(SimplifiedCqlParserT__1)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(575)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(576)
			p.Identifiers()
		}
		{
			p.SetState(577)
			p.Match(SimplifiedCqlParserT__1)
		}
		{
			p.SetState(578)
			p.Match(SimplifiedCqlParserK_IN)
		}
		{
			p.SetState(579)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(580)
			p.BindMarkers()
		}
		{
			p.SetState(581)
			p.Match(SimplifiedCqlParserT__1)
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(583)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(584)
			p.Identifiers()
		}
		{
			p.SetState(585)
			p.Match(SimplifiedCqlParserT__1)
		}
		{
			p.SetState(586)
			p.Operator()
		}
		{
			p.SetState(587)
			p.TupleLiteral()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(589)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(590)
			p.Identifiers()
		}
		{
			p.SetState(591)
			p.Match(SimplifiedCqlParserT__1)
		}
		{
			p.SetState(592)
			p.Operator()
		}
		{
			p.SetState(593)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(594)
			p.BindMarkers()
		}
		{
			p.SetState(595)
			p.Match(SimplifiedCqlParserT__1)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(597)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(598)
			p.Identifiers()
		}
		{
			p.SetState(599)
			p.Match(SimplifiedCqlParserT__1)
		}
		{
			p.SetState(600)
			p.Operator()
		}
		{
			p.SetState(601)
			p.BindMarker()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(603)
			p.Match(SimplifiedCqlParserT__0)
		}
		{
			p.SetState(604)
			p.Relation()
		}
		{
			p.SetState(605)
			p.Match(SimplifiedCqlParserT__1)
		}

	}

	return localctx
}

// IOperatorContext is an interface to support dynamic dispatch.
type IOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperatorContext differentiates from other interfaces.
	IsOperatorContext()
}

type OperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperatorContext() *OperatorContext {
	var p = new(OperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_operator
	return p
}

func (*OperatorContext) IsOperatorContext() {}

func NewOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperatorContext {
	var p = new(OperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_operator

	return p
}

func (s *OperatorContext) GetParser() antlr.Parser { return s.parser }
func (s *OperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterOperator(s)
	}
}

func (s *OperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitOperator(s)
	}
}

func (p *SimplifiedCqlParser) Operator() (localctx IOperatorContext) {
	this := p
	_ = this

	localctx = NewOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, SimplifiedCqlParserRULE_operator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(609)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__3)|(1<<SimplifiedCqlParserT__12)|(1<<SimplifiedCqlParserT__13)|(1<<SimplifiedCqlParserT__14)|(1<<SimplifiedCqlParserT__15)|(1<<SimplifiedCqlParserT__16)|(1<<SimplifiedCqlParserT__17))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_literal
	return p
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) PrimitiveLiteral() IPrimitiveLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitiveLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitiveLiteralContext)
}

func (s *LiteralContext) CollectionLiteral() ICollectionLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollectionLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollectionLiteralContext)
}

func (s *LiteralContext) TupleLiteral() ITupleLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleLiteralContext)
}

func (s *LiteralContext) UdtLiteral() IUdtLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdtLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUdtLiteralContext)
}

func (s *LiteralContext) K_NULL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_NULL, 0)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterLiteral(s)
	}
}

func (s *LiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitLiteral(s)
	}
}

func (p *SimplifiedCqlParser) Literal() (localctx ILiteralContext) {
	this := p
	_ = this

	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, SimplifiedCqlParserRULE_literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(616)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(611)
			p.PrimitiveLiteral()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(612)
			p.CollectionLiteral()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(613)
			p.TupleLiteral()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(614)
			p.UdtLiteral()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(615)
			p.Match(SimplifiedCqlParserK_NULL)
		}

	}

	return localctx
}

// IPrimitiveLiteralContext is an interface to support dynamic dispatch.
type IPrimitiveLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimitiveLiteralContext differentiates from other interfaces.
	IsPrimitiveLiteralContext()
}

type PrimitiveLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimitiveLiteralContext() *PrimitiveLiteralContext {
	var p = new(PrimitiveLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_primitiveLiteral
	return p
}

func (*PrimitiveLiteralContext) IsPrimitiveLiteralContext() {}

func NewPrimitiveLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimitiveLiteralContext {
	var p = new(PrimitiveLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_primitiveLiteral

	return p
}

func (s *PrimitiveLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimitiveLiteralContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserSTRING_LITERAL, 0)
}

func (s *PrimitiveLiteralContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserINTEGER, 0)
}

func (s *PrimitiveLiteralContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserFLOAT, 0)
}

func (s *PrimitiveLiteralContext) BOOLEAN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserBOOLEAN, 0)
}

func (s *PrimitiveLiteralContext) DURATION() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserDURATION, 0)
}

func (s *PrimitiveLiteralContext) UUID() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserUUID, 0)
}

func (s *PrimitiveLiteralContext) HEXNUMBER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserHEXNUMBER, 0)
}

func (s *PrimitiveLiteralContext) K_NAN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_NAN, 0)
}

func (s *PrimitiveLiteralContext) K_INFINITY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_INFINITY, 0)
}

func (s *PrimitiveLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimitiveLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimitiveLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterPrimitiveLiteral(s)
	}
}

func (s *PrimitiveLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitPrimitiveLiteral(s)
	}
}

func (p *SimplifiedCqlParser) PrimitiveLiteral() (localctx IPrimitiveLiteralContext) {
	this := p
	_ = this

	localctx = NewPrimitiveLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, SimplifiedCqlParserRULE_primitiveLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(633)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(618)
			p.Match(SimplifiedCqlParserSTRING_LITERAL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(619)
			p.Match(SimplifiedCqlParserINTEGER)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(620)
			p.Match(SimplifiedCqlParserFLOAT)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(621)
			p.Match(SimplifiedCqlParserBOOLEAN)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(622)
			p.Match(SimplifiedCqlParserDURATION)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(623)
			p.Match(SimplifiedCqlParserUUID)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(624)
			p.Match(SimplifiedCqlParserHEXNUMBER)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		p.SetState(626)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserT__5 {
			{
				p.SetState(625)
				p.Match(SimplifiedCqlParserT__5)
			}

		}
		{
			p.SetState(628)
			p.Match(SimplifiedCqlParserK_NAN)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		p.SetState(630)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SimplifiedCqlParserT__5 {
			{
				p.SetState(629)
				p.Match(SimplifiedCqlParserT__5)
			}

		}
		{
			p.SetState(632)
			p.Match(SimplifiedCqlParserK_INFINITY)
		}

	}

	return localctx
}

// ICollectionLiteralContext is an interface to support dynamic dispatch.
type ICollectionLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollectionLiteralContext differentiates from other interfaces.
	IsCollectionLiteralContext()
}

type CollectionLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollectionLiteralContext() *CollectionLiteralContext {
	var p = new(CollectionLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_collectionLiteral
	return p
}

func (*CollectionLiteralContext) IsCollectionLiteralContext() {}

func NewCollectionLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollectionLiteralContext {
	var p = new(CollectionLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_collectionLiteral

	return p
}

func (s *CollectionLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *CollectionLiteralContext) ListLiteral() IListLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListLiteralContext)
}

func (s *CollectionLiteralContext) SetLiteral() ISetLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetLiteralContext)
}

func (s *CollectionLiteralContext) MapLiteral() IMapLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMapLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMapLiteralContext)
}

func (s *CollectionLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollectionLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollectionLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterCollectionLiteral(s)
	}
}

func (s *CollectionLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitCollectionLiteral(s)
	}
}

func (p *SimplifiedCqlParser) CollectionLiteral() (localctx ICollectionLiteralContext) {
	this := p
	_ = this

	localctx = NewCollectionLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, SimplifiedCqlParserRULE_collectionLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(638)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(635)
			p.ListLiteral()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(636)
			p.SetLiteral()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(637)
			p.MapLiteral()
		}

	}

	return localctx
}

// IListLiteralContext is an interface to support dynamic dispatch.
type IListLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsListLiteralContext differentiates from other interfaces.
	IsListLiteralContext()
}

type ListLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListLiteralContext() *ListLiteralContext {
	var p = new(ListLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_listLiteral
	return p
}

func (*ListLiteralContext) IsListLiteralContext() {}

func NewListLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListLiteralContext {
	var p = new(ListLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_listLiteral

	return p
}

func (s *ListLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *ListLiteralContext) Terms() ITermsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *ListLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterListLiteral(s)
	}
}

func (s *ListLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitListLiteral(s)
	}
}

func (p *SimplifiedCqlParser) ListLiteral() (localctx IListLiteralContext) {
	this := p
	_ = this

	localctx = NewListLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, SimplifiedCqlParserRULE_listLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(640)
		p.Match(SimplifiedCqlParserT__8)
	}
	p.SetState(642)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__0)|(1<<SimplifiedCqlParserT__5)|(1<<SimplifiedCqlParserT__8)|(1<<SimplifiedCqlParserT__17)|(1<<SimplifiedCqlParserT__18)|(1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INFINITY-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(SimplifiedCqlParserK_NAN-65))|(1<<(SimplifiedCqlParserK_NULL-65))|(1<<(SimplifiedCqlParserK_PARTITION-65))|(1<<(SimplifiedCqlParserK_PER-65))|(1<<(SimplifiedCqlParserK_SMALLINT-65))|(1<<(SimplifiedCqlParserK_TEXT-65))|(1<<(SimplifiedCqlParserK_TIMESTAMP-65))|(1<<(SimplifiedCqlParserK_TIMEUUID-65))|(1<<(SimplifiedCqlParserK_TIME-65))|(1<<(SimplifiedCqlParserK_TINYINT-65))|(1<<(SimplifiedCqlParserK_TTL-65))|(1<<(SimplifiedCqlParserK_TUPLE-65))|(1<<(SimplifiedCqlParserK_TYPE-65))|(1<<(SimplifiedCqlParserK_UUID-65))|(1<<(SimplifiedCqlParserK_VALUES-65))|(1<<(SimplifiedCqlParserK_VARCHAR-65))|(1<<(SimplifiedCqlParserK_VARINT-65))|(1<<(SimplifiedCqlParserK_WRITETIME-65))|(1<<(SimplifiedCqlParserSTRING_LITERAL-65))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-65))|(1<<(SimplifiedCqlParserINTEGER-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(SimplifiedCqlParserQMARK-97))|(1<<(SimplifiedCqlParserFLOAT-97))|(1<<(SimplifiedCqlParserBOOLEAN-97))|(1<<(SimplifiedCqlParserDURATION-97))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-97))|(1<<(SimplifiedCqlParserHEXNUMBER-97))|(1<<(SimplifiedCqlParserUUID-97)))) != 0) {
		{
			p.SetState(641)
			p.Terms()
		}

	}
	{
		p.SetState(644)
		p.Match(SimplifiedCqlParserT__9)
	}

	return localctx
}

// ISetLiteralContext is an interface to support dynamic dispatch.
type ISetLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetLiteralContext differentiates from other interfaces.
	IsSetLiteralContext()
}

type SetLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetLiteralContext() *SetLiteralContext {
	var p = new(SetLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_setLiteral
	return p
}

func (*SetLiteralContext) IsSetLiteralContext() {}

func NewSetLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetLiteralContext {
	var p = new(SetLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_setLiteral

	return p
}

func (s *SetLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *SetLiteralContext) Terms() ITermsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *SetLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterSetLiteral(s)
	}
}

func (s *SetLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitSetLiteral(s)
	}
}

func (p *SimplifiedCqlParser) SetLiteral() (localctx ISetLiteralContext) {
	this := p
	_ = this

	localctx = NewSetLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, SimplifiedCqlParserRULE_setLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(646)
		p.Match(SimplifiedCqlParserT__18)
	}
	p.SetState(648)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__0)|(1<<SimplifiedCqlParserT__5)|(1<<SimplifiedCqlParserT__8)|(1<<SimplifiedCqlParserT__17)|(1<<SimplifiedCqlParserT__18)|(1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INFINITY-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(SimplifiedCqlParserK_NAN-65))|(1<<(SimplifiedCqlParserK_NULL-65))|(1<<(SimplifiedCqlParserK_PARTITION-65))|(1<<(SimplifiedCqlParserK_PER-65))|(1<<(SimplifiedCqlParserK_SMALLINT-65))|(1<<(SimplifiedCqlParserK_TEXT-65))|(1<<(SimplifiedCqlParserK_TIMESTAMP-65))|(1<<(SimplifiedCqlParserK_TIMEUUID-65))|(1<<(SimplifiedCqlParserK_TIME-65))|(1<<(SimplifiedCqlParserK_TINYINT-65))|(1<<(SimplifiedCqlParserK_TTL-65))|(1<<(SimplifiedCqlParserK_TUPLE-65))|(1<<(SimplifiedCqlParserK_TYPE-65))|(1<<(SimplifiedCqlParserK_UUID-65))|(1<<(SimplifiedCqlParserK_VALUES-65))|(1<<(SimplifiedCqlParserK_VARCHAR-65))|(1<<(SimplifiedCqlParserK_VARINT-65))|(1<<(SimplifiedCqlParserK_WRITETIME-65))|(1<<(SimplifiedCqlParserSTRING_LITERAL-65))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-65))|(1<<(SimplifiedCqlParserINTEGER-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(SimplifiedCqlParserQMARK-97))|(1<<(SimplifiedCqlParserFLOAT-97))|(1<<(SimplifiedCqlParserBOOLEAN-97))|(1<<(SimplifiedCqlParserDURATION-97))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-97))|(1<<(SimplifiedCqlParserHEXNUMBER-97))|(1<<(SimplifiedCqlParserUUID-97)))) != 0) {
		{
			p.SetState(647)
			p.Terms()
		}

	}
	{
		p.SetState(650)
		p.Match(SimplifiedCqlParserT__19)
	}

	return localctx
}

// IMapLiteralContext is an interface to support dynamic dispatch.
type IMapLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapLiteralContext differentiates from other interfaces.
	IsMapLiteralContext()
}

type MapLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapLiteralContext() *MapLiteralContext {
	var p = new(MapLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_mapLiteral
	return p
}

func (*MapLiteralContext) IsMapLiteralContext() {}

func NewMapLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapLiteralContext {
	var p = new(MapLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_mapLiteral

	return p
}

func (s *MapLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *MapLiteralContext) MapEntries() IMapEntriesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMapEntriesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMapEntriesContext)
}

func (s *MapLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterMapLiteral(s)
	}
}

func (s *MapLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitMapLiteral(s)
	}
}

func (p *SimplifiedCqlParser) MapLiteral() (localctx IMapLiteralContext) {
	this := p
	_ = this

	localctx = NewMapLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, SimplifiedCqlParserRULE_mapLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(652)
		p.Match(SimplifiedCqlParserT__18)
	}
	p.SetState(654)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__0)|(1<<SimplifiedCqlParserT__5)|(1<<SimplifiedCqlParserT__8)|(1<<SimplifiedCqlParserT__17)|(1<<SimplifiedCqlParserT__18)|(1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INFINITY-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(SimplifiedCqlParserK_NAN-65))|(1<<(SimplifiedCqlParserK_NULL-65))|(1<<(SimplifiedCqlParserK_PARTITION-65))|(1<<(SimplifiedCqlParserK_PER-65))|(1<<(SimplifiedCqlParserK_SMALLINT-65))|(1<<(SimplifiedCqlParserK_TEXT-65))|(1<<(SimplifiedCqlParserK_TIMESTAMP-65))|(1<<(SimplifiedCqlParserK_TIMEUUID-65))|(1<<(SimplifiedCqlParserK_TIME-65))|(1<<(SimplifiedCqlParserK_TINYINT-65))|(1<<(SimplifiedCqlParserK_TTL-65))|(1<<(SimplifiedCqlParserK_TUPLE-65))|(1<<(SimplifiedCqlParserK_TYPE-65))|(1<<(SimplifiedCqlParserK_UUID-65))|(1<<(SimplifiedCqlParserK_VALUES-65))|(1<<(SimplifiedCqlParserK_VARCHAR-65))|(1<<(SimplifiedCqlParserK_VARINT-65))|(1<<(SimplifiedCqlParserK_WRITETIME-65))|(1<<(SimplifiedCqlParserSTRING_LITERAL-65))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-65))|(1<<(SimplifiedCqlParserINTEGER-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(SimplifiedCqlParserQMARK-97))|(1<<(SimplifiedCqlParserFLOAT-97))|(1<<(SimplifiedCqlParserBOOLEAN-97))|(1<<(SimplifiedCqlParserDURATION-97))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-97))|(1<<(SimplifiedCqlParserHEXNUMBER-97))|(1<<(SimplifiedCqlParserUUID-97)))) != 0) {
		{
			p.SetState(653)
			p.MapEntries()
		}

	}
	{
		p.SetState(656)
		p.Match(SimplifiedCqlParserT__19)
	}

	return localctx
}

// IMapEntriesContext is an interface to support dynamic dispatch.
type IMapEntriesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapEntriesContext differentiates from other interfaces.
	IsMapEntriesContext()
}

type MapEntriesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapEntriesContext() *MapEntriesContext {
	var p = new(MapEntriesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_mapEntries
	return p
}

func (*MapEntriesContext) IsMapEntriesContext() {}

func NewMapEntriesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapEntriesContext {
	var p = new(MapEntriesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_mapEntries

	return p
}

func (s *MapEntriesContext) GetParser() antlr.Parser { return s.parser }

func (s *MapEntriesContext) AllMapEntry() []IMapEntryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMapEntryContext)(nil)).Elem())
	var tst = make([]IMapEntryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMapEntryContext)
		}
	}

	return tst
}

func (s *MapEntriesContext) MapEntry(i int) IMapEntryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMapEntryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMapEntryContext)
}

func (s *MapEntriesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapEntriesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapEntriesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterMapEntries(s)
	}
}

func (s *MapEntriesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitMapEntries(s)
	}
}

func (p *SimplifiedCqlParser) MapEntries() (localctx IMapEntriesContext) {
	this := p
	_ = this

	localctx = NewMapEntriesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, SimplifiedCqlParserRULE_mapEntries)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(658)
		p.MapEntry()
	}
	p.SetState(663)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(659)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(660)
			p.MapEntry()
		}

		p.SetState(665)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IMapEntryContext is an interface to support dynamic dispatch.
type IMapEntryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapEntryContext differentiates from other interfaces.
	IsMapEntryContext()
}

type MapEntryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapEntryContext() *MapEntryContext {
	var p = new(MapEntryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_mapEntry
	return p
}

func (*MapEntryContext) IsMapEntryContext() {}

func NewMapEntryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapEntryContext {
	var p = new(MapEntryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_mapEntry

	return p
}

func (s *MapEntryContext) GetParser() antlr.Parser { return s.parser }

func (s *MapEntryContext) AllTerm() []ITermContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITermContext)(nil)).Elem())
	var tst = make([]ITermContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITermContext)
		}
	}

	return tst
}

func (s *MapEntryContext) Term(i int) ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *MapEntryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapEntryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapEntryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterMapEntry(s)
	}
}

func (s *MapEntryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitMapEntry(s)
	}
}

func (p *SimplifiedCqlParser) MapEntry() (localctx IMapEntryContext) {
	this := p
	_ = this

	localctx = NewMapEntryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, SimplifiedCqlParserRULE_mapEntry)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(666)
		p.Term()
	}
	{
		p.SetState(667)
		p.Match(SimplifiedCqlParserT__17)
	}
	{
		p.SetState(668)
		p.Term()
	}

	return localctx
}

// ITupleLiteralsContext is an interface to support dynamic dispatch.
type ITupleLiteralsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleLiteralsContext differentiates from other interfaces.
	IsTupleLiteralsContext()
}

type TupleLiteralsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleLiteralsContext() *TupleLiteralsContext {
	var p = new(TupleLiteralsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_tupleLiterals
	return p
}

func (*TupleLiteralsContext) IsTupleLiteralsContext() {}

func NewTupleLiteralsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleLiteralsContext {
	var p = new(TupleLiteralsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_tupleLiterals

	return p
}

func (s *TupleLiteralsContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleLiteralsContext) AllTupleLiteral() []ITupleLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITupleLiteralContext)(nil)).Elem())
	var tst = make([]ITupleLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITupleLiteralContext)
		}
	}

	return tst
}

func (s *TupleLiteralsContext) TupleLiteral(i int) ITupleLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITupleLiteralContext)
}

func (s *TupleLiteralsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleLiteralsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleLiteralsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTupleLiterals(s)
	}
}

func (s *TupleLiteralsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTupleLiterals(s)
	}
}

func (p *SimplifiedCqlParser) TupleLiterals() (localctx ITupleLiteralsContext) {
	this := p
	_ = this

	localctx = NewTupleLiteralsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, SimplifiedCqlParserRULE_tupleLiterals)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(670)
		p.TupleLiteral()
	}
	p.SetState(675)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(671)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(672)
			p.TupleLiteral()
		}

		p.SetState(677)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITupleLiteralContext is an interface to support dynamic dispatch.
type ITupleLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleLiteralContext differentiates from other interfaces.
	IsTupleLiteralContext()
}

type TupleLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleLiteralContext() *TupleLiteralContext {
	var p = new(TupleLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_tupleLiteral
	return p
}

func (*TupleLiteralContext) IsTupleLiteralContext() {}

func NewTupleLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleLiteralContext {
	var p = new(TupleLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_tupleLiteral

	return p
}

func (s *TupleLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleLiteralContext) Terms() ITermsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermsContext)
}

func (s *TupleLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTupleLiteral(s)
	}
}

func (s *TupleLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTupleLiteral(s)
	}
}

func (p *SimplifiedCqlParser) TupleLiteral() (localctx ITupleLiteralContext) {
	this := p
	_ = this

	localctx = NewTupleLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, SimplifiedCqlParserRULE_tupleLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(678)
		p.Match(SimplifiedCqlParserT__0)
	}
	{
		p.SetState(679)
		p.Terms()
	}
	{
		p.SetState(680)
		p.Match(SimplifiedCqlParserT__1)
	}

	return localctx
}

// IUdtLiteralContext is an interface to support dynamic dispatch.
type IUdtLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUdtLiteralContext differentiates from other interfaces.
	IsUdtLiteralContext()
}

type UdtLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUdtLiteralContext() *UdtLiteralContext {
	var p = new(UdtLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_udtLiteral
	return p
}

func (*UdtLiteralContext) IsUdtLiteralContext() {}

func NewUdtLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UdtLiteralContext {
	var p = new(UdtLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_udtLiteral

	return p
}

func (s *UdtLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *UdtLiteralContext) FieldLiterals() IFieldLiteralsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldLiteralsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldLiteralsContext)
}

func (s *UdtLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UdtLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UdtLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUdtLiteral(s)
	}
}

func (s *UdtLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUdtLiteral(s)
	}
}

func (p *SimplifiedCqlParser) UdtLiteral() (localctx IUdtLiteralContext) {
	this := p
	_ = this

	localctx = NewUdtLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, SimplifiedCqlParserRULE_udtLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(682)
		p.Match(SimplifiedCqlParserT__18)
	}
	{
		p.SetState(683)
		p.FieldLiterals()
	}
	{
		p.SetState(684)
		p.Match(SimplifiedCqlParserT__19)
	}

	return localctx
}

// IFieldLiteralsContext is an interface to support dynamic dispatch.
type IFieldLiteralsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFieldLiteralsContext differentiates from other interfaces.
	IsFieldLiteralsContext()
}

type FieldLiteralsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldLiteralsContext() *FieldLiteralsContext {
	var p = new(FieldLiteralsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_fieldLiterals
	return p
}

func (*FieldLiteralsContext) IsFieldLiteralsContext() {}

func NewFieldLiteralsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldLiteralsContext {
	var p = new(FieldLiteralsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_fieldLiterals

	return p
}

func (s *FieldLiteralsContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldLiteralsContext) AllFieldLiteral() []IFieldLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFieldLiteralContext)(nil)).Elem())
	var tst = make([]IFieldLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFieldLiteralContext)
		}
	}

	return tst
}

func (s *FieldLiteralsContext) FieldLiteral(i int) IFieldLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFieldLiteralContext)
}

func (s *FieldLiteralsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldLiteralsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldLiteralsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFieldLiterals(s)
	}
}

func (s *FieldLiteralsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFieldLiterals(s)
	}
}

func (p *SimplifiedCqlParser) FieldLiterals() (localctx IFieldLiteralsContext) {
	this := p
	_ = this

	localctx = NewFieldLiteralsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, SimplifiedCqlParserRULE_fieldLiterals)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(686)
		p.FieldLiteral()
	}
	p.SetState(691)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(687)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(688)
			p.FieldLiteral()
		}

		p.SetState(693)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFieldLiteralContext is an interface to support dynamic dispatch.
type IFieldLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFieldLiteralContext differentiates from other interfaces.
	IsFieldLiteralContext()
}

type FieldLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldLiteralContext() *FieldLiteralContext {
	var p = new(FieldLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_fieldLiteral
	return p
}

func (*FieldLiteralContext) IsFieldLiteralContext() {}

func NewFieldLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldLiteralContext {
	var p = new(FieldLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_fieldLiteral

	return p
}

func (s *FieldLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldLiteralContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FieldLiteralContext) Term() ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *FieldLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFieldLiteral(s)
	}
}

func (s *FieldLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFieldLiteral(s)
	}
}

func (p *SimplifiedCqlParser) FieldLiteral() (localctx IFieldLiteralContext) {
	this := p
	_ = this

	localctx = NewFieldLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, SimplifiedCqlParserRULE_fieldLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(694)
		p.Identifier()
	}
	{
		p.SetState(695)
		p.Match(SimplifiedCqlParserT__17)
	}
	{
		p.SetState(696)
		p.Term()
	}

	return localctx
}

// IFunctionCallContext is an interface to support dynamic dispatch.
type IFunctionCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallContext differentiates from other interfaces.
	IsFunctionCallContext()
}

type FunctionCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallContext() *FunctionCallContext {
	var p = new(FunctionCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_functionCall
	return p
}

func (*FunctionCallContext) IsFunctionCallContext() {}

func NewFunctionCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallContext {
	var p = new(FunctionCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_functionCall

	return p
}

func (s *FunctionCallContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *FunctionCallContext) FunctionArgs() IFunctionArgsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgsContext)
}

func (s *FunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFunctionCall(s)
	}
}

func (s *FunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFunctionCall(s)
	}
}

func (p *SimplifiedCqlParser) FunctionCall() (localctx IFunctionCallContext) {
	this := p
	_ = this

	localctx = NewFunctionCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, SimplifiedCqlParserRULE_functionCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(698)
		p.FunctionName()
	}
	{
		p.SetState(699)
		p.Match(SimplifiedCqlParserT__0)
	}
	p.SetState(701)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SimplifiedCqlParserT__0)|(1<<SimplifiedCqlParserT__5)|(1<<SimplifiedCqlParserT__8)|(1<<SimplifiedCqlParserT__17)|(1<<SimplifiedCqlParserT__18)|(1<<SimplifiedCqlParserK_AS)|(1<<SimplifiedCqlParserK_ASCII)|(1<<SimplifiedCqlParserK_BIGINT)|(1<<SimplifiedCqlParserK_BLOB)|(1<<SimplifiedCqlParserK_BOOLEAN))) != 0) || (((_la-33)&-(0x1f+1)) == 0 && ((1<<uint((_la-33)))&((1<<(SimplifiedCqlParserK_CAST-33))|(1<<(SimplifiedCqlParserK_CLUSTERING-33))|(1<<(SimplifiedCqlParserK_CONTAINS-33))|(1<<(SimplifiedCqlParserK_COUNTER-33))|(1<<(SimplifiedCqlParserK_COUNT-33))|(1<<(SimplifiedCqlParserK_DATE-33))|(1<<(SimplifiedCqlParserK_DECIMAL-33))|(1<<(SimplifiedCqlParserK_DISTINCT-33))|(1<<(SimplifiedCqlParserK_DOUBLE-33))|(1<<(SimplifiedCqlParserK_DURATION-33))|(1<<(SimplifiedCqlParserK_EXISTS-33))|(1<<(SimplifiedCqlParserK_FILTERING-33))|(1<<(SimplifiedCqlParserK_FLOAT-33))|(1<<(SimplifiedCqlParserK_FROZEN-33))|(1<<(SimplifiedCqlParserK_GROUP-33))|(1<<(SimplifiedCqlParserK_INET-33))|(1<<(SimplifiedCqlParserK_INFINITY-33))|(1<<(SimplifiedCqlParserK_INT-33))|(1<<(SimplifiedCqlParserK_JSON-33))|(1<<(SimplifiedCqlParserK_KEY-33))|(1<<(SimplifiedCqlParserK_LIKE-33))|(1<<(SimplifiedCqlParserK_LIST-33))|(1<<(SimplifiedCqlParserK_MAP-33)))) != 0) || (((_la-65)&-(0x1f+1)) == 0 && ((1<<uint((_la-65)))&((1<<(SimplifiedCqlParserK_NAN-65))|(1<<(SimplifiedCqlParserK_NULL-65))|(1<<(SimplifiedCqlParserK_PARTITION-65))|(1<<(SimplifiedCqlParserK_PER-65))|(1<<(SimplifiedCqlParserK_SMALLINT-65))|(1<<(SimplifiedCqlParserK_TEXT-65))|(1<<(SimplifiedCqlParserK_TIMESTAMP-65))|(1<<(SimplifiedCqlParserK_TIMEUUID-65))|(1<<(SimplifiedCqlParserK_TIME-65))|(1<<(SimplifiedCqlParserK_TINYINT-65))|(1<<(SimplifiedCqlParserK_TTL-65))|(1<<(SimplifiedCqlParserK_TUPLE-65))|(1<<(SimplifiedCqlParserK_TYPE-65))|(1<<(SimplifiedCqlParserK_UUID-65))|(1<<(SimplifiedCqlParserK_VALUES-65))|(1<<(SimplifiedCqlParserK_VARCHAR-65))|(1<<(SimplifiedCqlParserK_VARINT-65))|(1<<(SimplifiedCqlParserK_WRITETIME-65))|(1<<(SimplifiedCqlParserSTRING_LITERAL-65))|(1<<(SimplifiedCqlParserQUOTED_IDENTIFIER-65))|(1<<(SimplifiedCqlParserINTEGER-65)))) != 0) || (((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(SimplifiedCqlParserQMARK-97))|(1<<(SimplifiedCqlParserFLOAT-97))|(1<<(SimplifiedCqlParserBOOLEAN-97))|(1<<(SimplifiedCqlParserDURATION-97))|(1<<(SimplifiedCqlParserUNQUOTED_IDENTIFIER-97))|(1<<(SimplifiedCqlParserHEXNUMBER-97))|(1<<(SimplifiedCqlParserUUID-97)))) != 0) {
		{
			p.SetState(700)
			p.FunctionArgs()
		}

	}
	{
		p.SetState(703)
		p.Match(SimplifiedCqlParserT__1)
	}

	return localctx
}

// IFunctionArgsContext is an interface to support dynamic dispatch.
type IFunctionArgsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionArgsContext differentiates from other interfaces.
	IsFunctionArgsContext()
}

type FunctionArgsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionArgsContext() *FunctionArgsContext {
	var p = new(FunctionArgsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_functionArgs
	return p
}

func (*FunctionArgsContext) IsFunctionArgsContext() {}

func NewFunctionArgsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionArgsContext {
	var p = new(FunctionArgsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_functionArgs

	return p
}

func (s *FunctionArgsContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionArgsContext) AllFunctionArg() []IFunctionArgContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionArgContext)(nil)).Elem())
	var tst = make([]IFunctionArgContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionArgContext)
		}
	}

	return tst
}

func (s *FunctionArgsContext) FunctionArg(i int) IFunctionArgContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionArgContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionArgContext)
}

func (s *FunctionArgsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionArgsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionArgsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFunctionArgs(s)
	}
}

func (s *FunctionArgsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFunctionArgs(s)
	}
}

func (p *SimplifiedCqlParser) FunctionArgs() (localctx IFunctionArgsContext) {
	this := p
	_ = this

	localctx = NewFunctionArgsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, SimplifiedCqlParserRULE_functionArgs)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(705)
		p.FunctionArg()
	}
	p.SetState(710)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(706)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(707)
			p.FunctionArg()
		}

		p.SetState(712)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFunctionArgContext is an interface to support dynamic dispatch.
type IFunctionArgContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionArgContext differentiates from other interfaces.
	IsFunctionArgContext()
}

type FunctionArgContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionArgContext() *FunctionArgContext {
	var p = new(FunctionArgContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_functionArg
	return p
}

func (*FunctionArgContext) IsFunctionArgContext() {}

func NewFunctionArgContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionArgContext {
	var p = new(FunctionArgContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_functionArg

	return p
}

func (s *FunctionArgContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionArgContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FunctionArgContext) Term() ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *FunctionArgContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionArgContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionArgContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFunctionArg(s)
	}
}

func (s *FunctionArgContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFunctionArg(s)
	}
}

func (p *SimplifiedCqlParser) FunctionArg() (localctx IFunctionArgContext) {
	this := p
	_ = this

	localctx = NewFunctionArgContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, SimplifiedCqlParserRULE_functionArg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(715)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(713)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(714)
			p.Term()
		}

	}

	return localctx
}

// IBindMarkersContext is an interface to support dynamic dispatch.
type IBindMarkersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindMarkersContext differentiates from other interfaces.
	IsBindMarkersContext()
}

type BindMarkersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindMarkersContext() *BindMarkersContext {
	var p = new(BindMarkersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_bindMarkers
	return p
}

func (*BindMarkersContext) IsBindMarkersContext() {}

func NewBindMarkersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindMarkersContext {
	var p = new(BindMarkersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_bindMarkers

	return p
}

func (s *BindMarkersContext) GetParser() antlr.Parser { return s.parser }

func (s *BindMarkersContext) AllBindMarker() []IBindMarkerContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem())
	var tst = make([]IBindMarkerContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBindMarkerContext)
		}
	}

	return tst
}

func (s *BindMarkersContext) BindMarker(i int) IBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *BindMarkersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindMarkersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindMarkersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterBindMarkers(s)
	}
}

func (s *BindMarkersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitBindMarkers(s)
	}
}

func (p *SimplifiedCqlParser) BindMarkers() (localctx IBindMarkersContext) {
	this := p
	_ = this

	localctx = NewBindMarkersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, SimplifiedCqlParserRULE_bindMarkers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(717)
		p.BindMarker()
	}
	p.SetState(722)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(718)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(719)
			p.BindMarker()
		}

		p.SetState(724)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IBindMarkerContext is an interface to support dynamic dispatch.
type IBindMarkerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBindMarkerContext differentiates from other interfaces.
	IsBindMarkerContext()
}

type BindMarkerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBindMarkerContext() *BindMarkerContext {
	var p = new(BindMarkerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_bindMarker
	return p
}

func (*BindMarkerContext) IsBindMarkerContext() {}

func NewBindMarkerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BindMarkerContext {
	var p = new(BindMarkerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_bindMarker

	return p
}

func (s *BindMarkerContext) GetParser() antlr.Parser { return s.parser }

func (s *BindMarkerContext) PositionalBindMarker() IPositionalBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPositionalBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPositionalBindMarkerContext)
}

func (s *BindMarkerContext) NamedBindMarker() INamedBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamedBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INamedBindMarkerContext)
}

func (s *BindMarkerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindMarkerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BindMarkerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterBindMarker(s)
	}
}

func (s *BindMarkerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitBindMarker(s)
	}
}

func (p *SimplifiedCqlParser) BindMarker() (localctx IBindMarkerContext) {
	this := p
	_ = this

	localctx = NewBindMarkerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, SimplifiedCqlParserRULE_bindMarker)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(727)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserQMARK:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(725)
			p.PositionalBindMarker()
		}

	case SimplifiedCqlParserT__17:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(726)
			p.NamedBindMarker()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPositionalBindMarkerContext is an interface to support dynamic dispatch.
type IPositionalBindMarkerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPositionalBindMarkerContext differentiates from other interfaces.
	IsPositionalBindMarkerContext()
}

type PositionalBindMarkerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPositionalBindMarkerContext() *PositionalBindMarkerContext {
	var p = new(PositionalBindMarkerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_positionalBindMarker
	return p
}

func (*PositionalBindMarkerContext) IsPositionalBindMarkerContext() {}

func NewPositionalBindMarkerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PositionalBindMarkerContext {
	var p = new(PositionalBindMarkerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_positionalBindMarker

	return p
}

func (s *PositionalBindMarkerContext) GetParser() antlr.Parser { return s.parser }

func (s *PositionalBindMarkerContext) QMARK() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserQMARK, 0)
}

func (s *PositionalBindMarkerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PositionalBindMarkerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PositionalBindMarkerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterPositionalBindMarker(s)
	}
}

func (s *PositionalBindMarkerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitPositionalBindMarker(s)
	}
}

func (p *SimplifiedCqlParser) PositionalBindMarker() (localctx IPositionalBindMarkerContext) {
	this := p
	_ = this

	localctx = NewPositionalBindMarkerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, SimplifiedCqlParserRULE_positionalBindMarker)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(729)
		p.Match(SimplifiedCqlParserQMARK)
	}

	return localctx
}

// INamedBindMarkerContext is an interface to support dynamic dispatch.
type INamedBindMarkerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNamedBindMarkerContext differentiates from other interfaces.
	IsNamedBindMarkerContext()
}

type NamedBindMarkerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamedBindMarkerContext() *NamedBindMarkerContext {
	var p = new(NamedBindMarkerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_namedBindMarker
	return p
}

func (*NamedBindMarkerContext) IsNamedBindMarkerContext() {}

func NewNamedBindMarkerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamedBindMarkerContext {
	var p = new(NamedBindMarkerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_namedBindMarker

	return p
}

func (s *NamedBindMarkerContext) GetParser() antlr.Parser { return s.parser }

func (s *NamedBindMarkerContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NamedBindMarkerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamedBindMarkerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamedBindMarkerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterNamedBindMarker(s)
	}
}

func (s *NamedBindMarkerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitNamedBindMarker(s)
	}
}

func (p *SimplifiedCqlParser) NamedBindMarker() (localctx INamedBindMarkerContext) {
	this := p
	_ = this

	localctx = NewNamedBindMarkerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, SimplifiedCqlParserRULE_namedBindMarker)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(731)
		p.Match(SimplifiedCqlParserT__17)
	}
	{
		p.SetState(732)
		p.Identifier()
	}

	return localctx
}

// ITermsContext is an interface to support dynamic dispatch.
type ITermsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTermsContext differentiates from other interfaces.
	IsTermsContext()
}

type TermsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTermsContext() *TermsContext {
	var p = new(TermsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_terms
	return p
}

func (*TermsContext) IsTermsContext() {}

func NewTermsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TermsContext {
	var p = new(TermsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_terms

	return p
}

func (s *TermsContext) GetParser() antlr.Parser { return s.parser }

func (s *TermsContext) AllTerm() []ITermContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITermContext)(nil)).Elem())
	var tst = make([]ITermContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITermContext)
		}
	}

	return tst
}

func (s *TermsContext) Term(i int) ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *TermsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TermsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TermsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTerms(s)
	}
}

func (s *TermsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTerms(s)
	}
}

func (p *SimplifiedCqlParser) Terms() (localctx ITermsContext) {
	this := p
	_ = this

	localctx = NewTermsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, SimplifiedCqlParserRULE_terms)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(734)
		p.Term()
	}
	p.SetState(739)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(735)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(736)
			p.Term()
		}

		p.SetState(741)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITermContext is an interface to support dynamic dispatch.
type ITermContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTermContext differentiates from other interfaces.
	IsTermContext()
}

type TermContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTermContext() *TermContext {
	var p = new(TermContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_term
	return p
}

func (*TermContext) IsTermContext() {}

func NewTermContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TermContext {
	var p = new(TermContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_term

	return p
}

func (s *TermContext) GetParser() antlr.Parser { return s.parser }

func (s *TermContext) Literal() ILiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *TermContext) BindMarker() IBindMarkerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBindMarkerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBindMarkerContext)
}

func (s *TermContext) FunctionCall() IFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *TermContext) TypeCast() ITypeCastContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeCastContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeCastContext)
}

func (s *TermContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TermContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TermContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTerm(s)
	}
}

func (s *TermContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTerm(s)
	}
}

func (p *SimplifiedCqlParser) Term() (localctx ITermContext) {
	this := p
	_ = this

	localctx = NewTermContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, SimplifiedCqlParserRULE_term)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(746)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(742)
			p.Literal()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(743)
			p.BindMarker()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(744)
			p.FunctionCall()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(745)
			p.TypeCast()
		}

	}

	return localctx
}

// ITypeCastContext is an interface to support dynamic dispatch.
type ITypeCastContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeCastContext differentiates from other interfaces.
	IsTypeCastContext()
}

type TypeCastContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeCastContext() *TypeCastContext {
	var p = new(TypeCastContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_typeCast
	return p
}

func (*TypeCastContext) IsTypeCastContext() {}

func NewTypeCastContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeCastContext {
	var p = new(TypeCastContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_typeCast

	return p
}

func (s *TypeCastContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeCastContext) CqlType() ICqlTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICqlTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICqlTypeContext)
}

func (s *TypeCastContext) Term() ITermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITermContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITermContext)
}

func (s *TypeCastContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeCastContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeCastContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTypeCast(s)
	}
}

func (s *TypeCastContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTypeCast(s)
	}
}

func (p *SimplifiedCqlParser) TypeCast() (localctx ITypeCastContext) {
	this := p
	_ = this

	localctx = NewTypeCastContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, SimplifiedCqlParserRULE_typeCast)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(748)
		p.Match(SimplifiedCqlParserT__0)
	}
	{
		p.SetState(749)
		p.CqlType()
	}
	{
		p.SetState(750)
		p.Match(SimplifiedCqlParserT__1)
	}
	{
		p.SetState(751)
		p.Term()
	}

	return localctx
}

// ICqlTypeContext is an interface to support dynamic dispatch.
type ICqlTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCqlTypeContext differentiates from other interfaces.
	IsCqlTypeContext()
}

type CqlTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCqlTypeContext() *CqlTypeContext {
	var p = new(CqlTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_cqlType
	return p
}

func (*CqlTypeContext) IsCqlTypeContext() {}

func NewCqlTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CqlTypeContext {
	var p = new(CqlTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_cqlType

	return p
}

func (s *CqlTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *CqlTypeContext) PrimitiveType() IPrimitiveTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitiveTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *CqlTypeContext) CollectionType() ICollectionTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollectionTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollectionTypeContext)
}

func (s *CqlTypeContext) TupleType() ITupleTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleTypeContext)
}

func (s *CqlTypeContext) UserTypeName() IUserTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserTypeNameContext)
}

func (s *CqlTypeContext) K_FROZEN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FROZEN, 0)
}

func (s *CqlTypeContext) CqlType() ICqlTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICqlTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICqlTypeContext)
}

func (s *CqlTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CqlTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CqlTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterCqlType(s)
	}
}

func (s *CqlTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitCqlType(s)
	}
}

func (p *SimplifiedCqlParser) CqlType() (localctx ICqlTypeContext) {
	this := p
	_ = this

	localctx = NewCqlTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, SimplifiedCqlParserRULE_cqlType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(762)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(753)
			p.PrimitiveType()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(754)
			p.CollectionType()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(755)
			p.TupleType()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(756)
			p.UserTypeName()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(757)
			p.Match(SimplifiedCqlParserK_FROZEN)
		}
		{
			p.SetState(758)
			p.Match(SimplifiedCqlParserT__12)
		}
		{
			p.SetState(759)
			p.CqlType()
		}
		{
			p.SetState(760)
			p.Match(SimplifiedCqlParserT__14)
		}

	}

	return localctx
}

// IPrimitiveTypeContext is an interface to support dynamic dispatch.
type IPrimitiveTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimitiveTypeContext differentiates from other interfaces.
	IsPrimitiveTypeContext()
}

type PrimitiveTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimitiveTypeContext() *PrimitiveTypeContext {
	var p = new(PrimitiveTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_primitiveType
	return p
}

func (*PrimitiveTypeContext) IsPrimitiveTypeContext() {}

func NewPrimitiveTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimitiveTypeContext {
	var p = new(PrimitiveTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_primitiveType

	return p
}

func (s *PrimitiveTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimitiveTypeContext) K_ASCII() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_ASCII, 0)
}

func (s *PrimitiveTypeContext) K_BIGINT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BIGINT, 0)
}

func (s *PrimitiveTypeContext) K_BLOB() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BLOB, 0)
}

func (s *PrimitiveTypeContext) K_BOOLEAN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_BOOLEAN, 0)
}

func (s *PrimitiveTypeContext) K_COUNTER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_COUNTER, 0)
}

func (s *PrimitiveTypeContext) K_DATE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DATE, 0)
}

func (s *PrimitiveTypeContext) K_DECIMAL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DECIMAL, 0)
}

func (s *PrimitiveTypeContext) K_DOUBLE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DOUBLE, 0)
}

func (s *PrimitiveTypeContext) K_DURATION() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DURATION, 0)
}

func (s *PrimitiveTypeContext) K_FLOAT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FLOAT, 0)
}

func (s *PrimitiveTypeContext) K_INET() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_INET, 0)
}

func (s *PrimitiveTypeContext) K_INT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_INT, 0)
}

func (s *PrimitiveTypeContext) K_SMALLINT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_SMALLINT, 0)
}

func (s *PrimitiveTypeContext) K_TEXT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TEXT, 0)
}

func (s *PrimitiveTypeContext) K_TIME() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TIME, 0)
}

func (s *PrimitiveTypeContext) K_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TIMESTAMP, 0)
}

func (s *PrimitiveTypeContext) K_TIMEUUID() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TIMEUUID, 0)
}

func (s *PrimitiveTypeContext) K_TINYINT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TINYINT, 0)
}

func (s *PrimitiveTypeContext) K_UUID() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_UUID, 0)
}

func (s *PrimitiveTypeContext) K_VARCHAR() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_VARCHAR, 0)
}

func (s *PrimitiveTypeContext) K_VARINT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_VARINT, 0)
}

func (s *PrimitiveTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimitiveTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimitiveTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterPrimitiveType(s)
	}
}

func (s *PrimitiveTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitPrimitiveType(s)
	}
}

func (p *SimplifiedCqlParser) PrimitiveType() (localctx IPrimitiveTypeContext) {
	this := p
	_ = this

	localctx = NewPrimitiveTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, SimplifiedCqlParserRULE_primitiveType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(764)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-26)&-(0x1f+1)) == 0 && ((1<<uint((_la-26)))&((1<<(SimplifiedCqlParserK_ASCII-26))|(1<<(SimplifiedCqlParserK_BIGINT-26))|(1<<(SimplifiedCqlParserK_BLOB-26))|(1<<(SimplifiedCqlParserK_BOOLEAN-26))|(1<<(SimplifiedCqlParserK_COUNTER-26))|(1<<(SimplifiedCqlParserK_DATE-26))|(1<<(SimplifiedCqlParserK_DECIMAL-26))|(1<<(SimplifiedCqlParserK_DOUBLE-26))|(1<<(SimplifiedCqlParserK_DURATION-26))|(1<<(SimplifiedCqlParserK_FLOAT-26))|(1<<(SimplifiedCqlParserK_INET-26))|(1<<(SimplifiedCqlParserK_INT-26)))) != 0) || (((_la-74)&-(0x1f+1)) == 0 && ((1<<uint((_la-74)))&((1<<(SimplifiedCqlParserK_SMALLINT-74))|(1<<(SimplifiedCqlParserK_TEXT-74))|(1<<(SimplifiedCqlParserK_TIMESTAMP-74))|(1<<(SimplifiedCqlParserK_TIMEUUID-74))|(1<<(SimplifiedCqlParserK_TIME-74))|(1<<(SimplifiedCqlParserK_TINYINT-74))|(1<<(SimplifiedCqlParserK_UUID-74))|(1<<(SimplifiedCqlParserK_VARCHAR-74))|(1<<(SimplifiedCqlParserK_VARINT-74)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ICollectionTypeContext is an interface to support dynamic dispatch.
type ICollectionTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollectionTypeContext differentiates from other interfaces.
	IsCollectionTypeContext()
}

type CollectionTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollectionTypeContext() *CollectionTypeContext {
	var p = new(CollectionTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_collectionType
	return p
}

func (*CollectionTypeContext) IsCollectionTypeContext() {}

func NewCollectionTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CollectionTypeContext {
	var p = new(CollectionTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_collectionType

	return p
}

func (s *CollectionTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *CollectionTypeContext) K_LIST() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIST, 0)
}

func (s *CollectionTypeContext) AllCqlType() []ICqlTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICqlTypeContext)(nil)).Elem())
	var tst = make([]ICqlTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICqlTypeContext)
		}
	}

	return tst
}

func (s *CollectionTypeContext) CqlType(i int) ICqlTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICqlTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICqlTypeContext)
}

func (s *CollectionTypeContext) K_SET() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_SET, 0)
}

func (s *CollectionTypeContext) K_MAP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_MAP, 0)
}

func (s *CollectionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollectionTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CollectionTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterCollectionType(s)
	}
}

func (s *CollectionTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitCollectionType(s)
	}
}

func (p *SimplifiedCqlParser) CollectionType() (localctx ICollectionTypeContext) {
	this := p
	_ = this

	localctx = NewCollectionTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, SimplifiedCqlParserRULE_collectionType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(783)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserK_LIST:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(766)
			p.Match(SimplifiedCqlParserK_LIST)
		}
		{
			p.SetState(767)
			p.Match(SimplifiedCqlParserT__12)
		}
		{
			p.SetState(768)
			p.CqlType()
		}
		{
			p.SetState(769)
			p.Match(SimplifiedCqlParserT__14)
		}

	case SimplifiedCqlParserK_SET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(771)
			p.Match(SimplifiedCqlParserK_SET)
		}
		{
			p.SetState(772)
			p.Match(SimplifiedCqlParserT__12)
		}
		{
			p.SetState(773)
			p.CqlType()
		}
		{
			p.SetState(774)
			p.Match(SimplifiedCqlParserT__14)
		}

	case SimplifiedCqlParserK_MAP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(776)
			p.Match(SimplifiedCqlParserK_MAP)
		}
		{
			p.SetState(777)
			p.Match(SimplifiedCqlParserT__12)
		}
		{
			p.SetState(778)
			p.CqlType()
		}
		{
			p.SetState(779)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(780)
			p.CqlType()
		}
		{
			p.SetState(781)
			p.Match(SimplifiedCqlParserT__14)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITupleTypeContext is an interface to support dynamic dispatch.
type ITupleTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleTypeContext differentiates from other interfaces.
	IsTupleTypeContext()
}

type TupleTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleTypeContext() *TupleTypeContext {
	var p = new(TupleTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_tupleType
	return p
}

func (*TupleTypeContext) IsTupleTypeContext() {}

func NewTupleTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleTypeContext {
	var p = new(TupleTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_tupleType

	return p
}

func (s *TupleTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleTypeContext) K_TUPLE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TUPLE, 0)
}

func (s *TupleTypeContext) AllCqlType() []ICqlTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICqlTypeContext)(nil)).Elem())
	var tst = make([]ICqlTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICqlTypeContext)
		}
	}

	return tst
}

func (s *TupleTypeContext) CqlType(i int) ICqlTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICqlTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICqlTypeContext)
}

func (s *TupleTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTupleType(s)
	}
}

func (s *TupleTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTupleType(s)
	}
}

func (p *SimplifiedCqlParser) TupleType() (localctx ITupleTypeContext) {
	this := p
	_ = this

	localctx = NewTupleTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, SimplifiedCqlParserRULE_tupleType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(785)
		p.Match(SimplifiedCqlParserK_TUPLE)
	}
	{
		p.SetState(786)
		p.Match(SimplifiedCqlParserT__12)
	}
	{
		p.SetState(787)
		p.CqlType()
	}
	p.SetState(792)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(788)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(789)
			p.CqlType()
		}

		p.SetState(794)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(795)
		p.Match(SimplifiedCqlParserT__14)
	}

	return localctx
}

// ITableNameContext is an interface to support dynamic dispatch.
type ITableNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTableNameContext differentiates from other interfaces.
	IsTableNameContext()
}

type TableNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTableNameContext() *TableNameContext {
	var p = new(TableNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_tableName
	return p
}

func (*TableNameContext) IsTableNameContext() {}

func NewTableNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TableNameContext {
	var p = new(TableNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_tableName

	return p
}

func (s *TableNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TableNameContext) QualifiedIdentifier() IQualifiedIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedIdentifierContext)
}

func (s *TableNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TableNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterTableName(s)
	}
}

func (s *TableNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitTableName(s)
	}
}

func (p *SimplifiedCqlParser) TableName() (localctx ITableNameContext) {
	this := p
	_ = this

	localctx = NewTableNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, SimplifiedCqlParserRULE_tableName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(797)
		p.QualifiedIdentifier()
	}

	return localctx
}

// IFunctionNameContext is an interface to support dynamic dispatch.
type IFunctionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionNameContext differentiates from other interfaces.
	IsFunctionNameContext()
}

type FunctionNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionNameContext() *FunctionNameContext {
	var p = new(FunctionNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_functionName
	return p
}

func (*FunctionNameContext) IsFunctionNameContext() {}

func NewFunctionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionNameContext {
	var p = new(FunctionNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_functionName

	return p
}

func (s *FunctionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionNameContext) QualifiedIdentifier() IQualifiedIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedIdentifierContext)
}

func (s *FunctionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterFunctionName(s)
	}
}

func (s *FunctionNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitFunctionName(s)
	}
}

func (p *SimplifiedCqlParser) FunctionName() (localctx IFunctionNameContext) {
	this := p
	_ = this

	localctx = NewFunctionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, SimplifiedCqlParserRULE_functionName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(799)
		p.QualifiedIdentifier()
	}

	return localctx
}

// IUserTypeNameContext is an interface to support dynamic dispatch.
type IUserTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserTypeNameContext differentiates from other interfaces.
	IsUserTypeNameContext()
}

type UserTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserTypeNameContext() *UserTypeNameContext {
	var p = new(UserTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_userTypeName
	return p
}

func (*UserTypeNameContext) IsUserTypeNameContext() {}

func NewUserTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserTypeNameContext {
	var p = new(UserTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_userTypeName

	return p
}

func (s *UserTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *UserTypeNameContext) QualifiedIdentifier() IQualifiedIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedIdentifierContext)
}

func (s *UserTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUserTypeName(s)
	}
}

func (s *UserTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUserTypeName(s)
	}
}

func (p *SimplifiedCqlParser) UserTypeName() (localctx IUserTypeNameContext) {
	this := p
	_ = this

	localctx = NewUserTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, SimplifiedCqlParserRULE_userTypeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(801)
		p.QualifiedIdentifier()
	}

	return localctx
}

// IKeyspaceNameContext is an interface to support dynamic dispatch.
type IKeyspaceNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyspaceNameContext differentiates from other interfaces.
	IsKeyspaceNameContext()
}

type KeyspaceNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyspaceNameContext() *KeyspaceNameContext {
	var p = new(KeyspaceNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_keyspaceName
	return p
}

func (*KeyspaceNameContext) IsKeyspaceNameContext() {}

func NewKeyspaceNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyspaceNameContext {
	var p = new(KeyspaceNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_keyspaceName

	return p
}

func (s *KeyspaceNameContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyspaceNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *KeyspaceNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyspaceNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyspaceNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterKeyspaceName(s)
	}
}

func (s *KeyspaceNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitKeyspaceName(s)
	}
}

func (p *SimplifiedCqlParser) KeyspaceName() (localctx IKeyspaceNameContext) {
	this := p
	_ = this

	localctx = NewKeyspaceNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, SimplifiedCqlParserRULE_keyspaceName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(803)
		p.Identifier()
	}

	return localctx
}

// IQualifiedIdentifierContext is an interface to support dynamic dispatch.
type IQualifiedIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualifiedIdentifierContext differentiates from other interfaces.
	IsQualifiedIdentifierContext()
}

type QualifiedIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiedIdentifierContext() *QualifiedIdentifierContext {
	var p = new(QualifiedIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_qualifiedIdentifier
	return p
}

func (*QualifiedIdentifierContext) IsQualifiedIdentifierContext() {}

func NewQualifiedIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiedIdentifierContext {
	var p = new(QualifiedIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_qualifiedIdentifier

	return p
}

func (s *QualifiedIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiedIdentifierContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *QualifiedIdentifierContext) KeyspaceName() IKeyspaceNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyspaceNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeyspaceNameContext)
}

func (s *QualifiedIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiedIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifiedIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterQualifiedIdentifier(s)
	}
}

func (s *QualifiedIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitQualifiedIdentifier(s)
	}
}

func (p *SimplifiedCqlParser) QualifiedIdentifier() (localctx IQualifiedIdentifierContext) {
	this := p
	_ = this

	localctx = NewQualifiedIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, SimplifiedCqlParserRULE_qualifiedIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(808)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(805)
			p.KeyspaceName()
		}
		{
			p.SetState(806)
			p.Match(SimplifiedCqlParserT__10)
		}

	}
	{
		p.SetState(810)
		p.Identifier()
	}

	return localctx
}

// IIdentifiersContext is an interface to support dynamic dispatch.
type IIdentifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifiersContext differentiates from other interfaces.
	IsIdentifiersContext()
}

type IdentifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifiersContext() *IdentifiersContext {
	var p = new(IdentifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_identifiers
	return p
}

func (*IdentifiersContext) IsIdentifiersContext() {}

func NewIdentifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifiersContext {
	var p = new(IdentifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_identifiers

	return p
}

func (s *IdentifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifiersContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *IdentifiersContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *IdentifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterIdentifiers(s)
	}
}

func (s *IdentifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitIdentifiers(s)
	}
}

func (p *SimplifiedCqlParser) Identifiers() (localctx IIdentifiersContext) {
	this := p
	_ = this

	localctx = NewIdentifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, SimplifiedCqlParserRULE_identifiers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(812)
		p.Identifier()
	}
	p.SetState(817)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SimplifiedCqlParserT__2 {
		{
			p.SetState(813)
			p.Match(SimplifiedCqlParserT__2)
		}
		{
			p.SetState(814)
			p.Identifier()
		}

		p.SetState(819)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) UNQUOTED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserUNQUOTED_IDENTIFIER, 0)
}

func (s *IdentifierContext) QUOTED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserQUOTED_IDENTIFIER, 0)
}

func (s *IdentifierContext) UnreservedKeyword() IUnreservedKeywordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnreservedKeywordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnreservedKeywordContext)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (p *SimplifiedCqlParser) Identifier() (localctx IIdentifierContext) {
	this := p
	_ = this

	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, SimplifiedCqlParserRULE_identifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(823)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserUNQUOTED_IDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(820)
			p.Match(SimplifiedCqlParserUNQUOTED_IDENTIFIER)
		}

	case SimplifiedCqlParserQUOTED_IDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(821)
			p.Match(SimplifiedCqlParserQUOTED_IDENTIFIER)
		}

	case SimplifiedCqlParserK_AS, SimplifiedCqlParserK_ASCII, SimplifiedCqlParserK_BIGINT, SimplifiedCqlParserK_BLOB, SimplifiedCqlParserK_BOOLEAN, SimplifiedCqlParserK_CAST, SimplifiedCqlParserK_CLUSTERING, SimplifiedCqlParserK_CONTAINS, SimplifiedCqlParserK_COUNTER, SimplifiedCqlParserK_COUNT, SimplifiedCqlParserK_DATE, SimplifiedCqlParserK_DECIMAL, SimplifiedCqlParserK_DISTINCT, SimplifiedCqlParserK_DOUBLE, SimplifiedCqlParserK_DURATION, SimplifiedCqlParserK_EXISTS, SimplifiedCqlParserK_FILTERING, SimplifiedCqlParserK_FLOAT, SimplifiedCqlParserK_FROZEN, SimplifiedCqlParserK_GROUP, SimplifiedCqlParserK_INET, SimplifiedCqlParserK_INT, SimplifiedCqlParserK_JSON, SimplifiedCqlParserK_KEY, SimplifiedCqlParserK_LIKE, SimplifiedCqlParserK_LIST, SimplifiedCqlParserK_MAP, SimplifiedCqlParserK_PARTITION, SimplifiedCqlParserK_PER, SimplifiedCqlParserK_SMALLINT, SimplifiedCqlParserK_TEXT, SimplifiedCqlParserK_TIMESTAMP, SimplifiedCqlParserK_TIMEUUID, SimplifiedCqlParserK_TIME, SimplifiedCqlParserK_TINYINT, SimplifiedCqlParserK_TTL, SimplifiedCqlParserK_TUPLE, SimplifiedCqlParserK_TYPE, SimplifiedCqlParserK_UUID, SimplifiedCqlParserK_VALUES, SimplifiedCqlParserK_VARCHAR, SimplifiedCqlParserK_VARINT, SimplifiedCqlParserK_WRITETIME:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(822)
			p.UnreservedKeyword()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUnreservedKeywordContext is an interface to support dynamic dispatch.
type IUnreservedKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnreservedKeywordContext differentiates from other interfaces.
	IsUnreservedKeywordContext()
}

type UnreservedKeywordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnreservedKeywordContext() *UnreservedKeywordContext {
	var p = new(UnreservedKeywordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_unreservedKeyword
	return p
}

func (*UnreservedKeywordContext) IsUnreservedKeywordContext() {}

func NewUnreservedKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnreservedKeywordContext {
	var p = new(UnreservedKeywordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_unreservedKeyword

	return p
}

func (s *UnreservedKeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *UnreservedKeywordContext) K_AS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_AS, 0)
}

func (s *UnreservedKeywordContext) K_CAST() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_CAST, 0)
}

func (s *UnreservedKeywordContext) K_CLUSTERING() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_CLUSTERING, 0)
}

func (s *UnreservedKeywordContext) K_CONTAINS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_CONTAINS, 0)
}

func (s *UnreservedKeywordContext) K_COUNT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_COUNT, 0)
}

func (s *UnreservedKeywordContext) K_DISTINCT() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_DISTINCT, 0)
}

func (s *UnreservedKeywordContext) K_EXISTS() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_EXISTS, 0)
}

func (s *UnreservedKeywordContext) K_FILTERING() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FILTERING, 0)
}

func (s *UnreservedKeywordContext) K_FROZEN() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_FROZEN, 0)
}

func (s *UnreservedKeywordContext) K_GROUP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_GROUP, 0)
}

func (s *UnreservedKeywordContext) K_JSON() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_JSON, 0)
}

func (s *UnreservedKeywordContext) K_KEY() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_KEY, 0)
}

func (s *UnreservedKeywordContext) K_LIKE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIKE, 0)
}

func (s *UnreservedKeywordContext) K_LIST() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_LIST, 0)
}

func (s *UnreservedKeywordContext) K_MAP() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_MAP, 0)
}

func (s *UnreservedKeywordContext) K_PARTITION() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_PARTITION, 0)
}

func (s *UnreservedKeywordContext) K_PER() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_PER, 0)
}

func (s *UnreservedKeywordContext) K_TTL() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TTL, 0)
}

func (s *UnreservedKeywordContext) K_TUPLE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TUPLE, 0)
}

func (s *UnreservedKeywordContext) K_TYPE() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_TYPE, 0)
}

func (s *UnreservedKeywordContext) K_VALUES() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_VALUES, 0)
}

func (s *UnreservedKeywordContext) K_WRITETIME() antlr.TerminalNode {
	return s.GetToken(SimplifiedCqlParserK_WRITETIME, 0)
}

func (s *UnreservedKeywordContext) PrimitiveType() IPrimitiveTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitiveTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitiveTypeContext)
}

func (s *UnreservedKeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnreservedKeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnreservedKeywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUnreservedKeyword(s)
	}
}

func (s *UnreservedKeywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUnreservedKeyword(s)
	}
}

func (p *SimplifiedCqlParser) UnreservedKeyword() (localctx IUnreservedKeywordContext) {
	this := p
	_ = this

	localctx = NewUnreservedKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, SimplifiedCqlParserRULE_unreservedKeyword)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(848)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SimplifiedCqlParserK_AS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(825)
			p.Match(SimplifiedCqlParserK_AS)
		}

	case SimplifiedCqlParserK_CAST:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(826)
			p.Match(SimplifiedCqlParserK_CAST)
		}

	case SimplifiedCqlParserK_CLUSTERING:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(827)
			p.Match(SimplifiedCqlParserK_CLUSTERING)
		}

	case SimplifiedCqlParserK_CONTAINS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(828)
			p.Match(SimplifiedCqlParserK_CONTAINS)
		}

	case SimplifiedCqlParserK_COUNT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(829)
			p.Match(SimplifiedCqlParserK_COUNT)
		}

	case SimplifiedCqlParserK_DISTINCT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(830)
			p.Match(SimplifiedCqlParserK_DISTINCT)
		}

	case SimplifiedCqlParserK_EXISTS:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(831)
			p.Match(SimplifiedCqlParserK_EXISTS)
		}

	case SimplifiedCqlParserK_FILTERING:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(832)
			p.Match(SimplifiedCqlParserK_FILTERING)
		}

	case SimplifiedCqlParserK_FROZEN:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(833)
			p.Match(SimplifiedCqlParserK_FROZEN)
		}

	case SimplifiedCqlParserK_GROUP:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(834)
			p.Match(SimplifiedCqlParserK_GROUP)
		}

	case SimplifiedCqlParserK_JSON:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(835)
			p.Match(SimplifiedCqlParserK_JSON)
		}

	case SimplifiedCqlParserK_KEY:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(836)
			p.Match(SimplifiedCqlParserK_KEY)
		}

	case SimplifiedCqlParserK_LIKE:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(837)
			p.Match(SimplifiedCqlParserK_LIKE)
		}

	case SimplifiedCqlParserK_LIST:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(838)
			p.Match(SimplifiedCqlParserK_LIST)
		}

	case SimplifiedCqlParserK_MAP:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(839)
			p.Match(SimplifiedCqlParserK_MAP)
		}

	case SimplifiedCqlParserK_PARTITION:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(840)
			p.Match(SimplifiedCqlParserK_PARTITION)
		}

	case SimplifiedCqlParserK_PER:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(841)
			p.Match(SimplifiedCqlParserK_PER)
		}

	case SimplifiedCqlParserK_TTL:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(842)
			p.Match(SimplifiedCqlParserK_TTL)
		}

	case SimplifiedCqlParserK_TUPLE:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(843)
			p.Match(SimplifiedCqlParserK_TUPLE)
		}

	case SimplifiedCqlParserK_TYPE:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(844)
			p.Match(SimplifiedCqlParserK_TYPE)
		}

	case SimplifiedCqlParserK_VALUES:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(845)
			p.Match(SimplifiedCqlParserK_VALUES)
		}

	case SimplifiedCqlParserK_WRITETIME:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(846)
			p.Match(SimplifiedCqlParserK_WRITETIME)
		}

	case SimplifiedCqlParserK_ASCII, SimplifiedCqlParserK_BIGINT, SimplifiedCqlParserK_BLOB, SimplifiedCqlParserK_BOOLEAN, SimplifiedCqlParserK_COUNTER, SimplifiedCqlParserK_DATE, SimplifiedCqlParserK_DECIMAL, SimplifiedCqlParserK_DOUBLE, SimplifiedCqlParserK_DURATION, SimplifiedCqlParserK_FLOAT, SimplifiedCqlParserK_INET, SimplifiedCqlParserK_INT, SimplifiedCqlParserK_SMALLINT, SimplifiedCqlParserK_TEXT, SimplifiedCqlParserK_TIMESTAMP, SimplifiedCqlParserK_TIMEUUID, SimplifiedCqlParserK_TIME, SimplifiedCqlParserK_TINYINT, SimplifiedCqlParserK_UUID, SimplifiedCqlParserK_VARCHAR, SimplifiedCqlParserK_VARINT:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(847)
			p.PrimitiveType()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUnrecognizedStatementContext is an interface to support dynamic dispatch.
type IUnrecognizedStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnrecognizedStatementContext differentiates from other interfaces.
	IsUnrecognizedStatementContext()
}

type UnrecognizedStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnrecognizedStatementContext() *UnrecognizedStatementContext {
	var p = new(UnrecognizedStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_unrecognizedStatement
	return p
}

func (*UnrecognizedStatementContext) IsUnrecognizedStatementContext() {}

func NewUnrecognizedStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnrecognizedStatementContext {
	var p = new(UnrecognizedStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_unrecognizedStatement

	return p
}

func (s *UnrecognizedStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UnrecognizedStatementContext) AllUnrecognizedToken() []IUnrecognizedTokenContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnrecognizedTokenContext)(nil)).Elem())
	var tst = make([]IUnrecognizedTokenContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnrecognizedTokenContext)
		}
	}

	return tst
}

func (s *UnrecognizedStatementContext) UnrecognizedToken(i int) IUnrecognizedTokenContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnrecognizedTokenContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnrecognizedTokenContext)
}

func (s *UnrecognizedStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnrecognizedStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnrecognizedStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUnrecognizedStatement(s)
	}
}

func (s *UnrecognizedStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUnrecognizedStatement(s)
	}
}

func (p *SimplifiedCqlParser) UnrecognizedStatement() (localctx IUnrecognizedStatementContext) {
	this := p
	_ = this

	localctx = NewUnrecognizedStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, SimplifiedCqlParserRULE_unrecognizedStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(853)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 85, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(850)
				p.UnrecognizedToken()
			}

		}
		p.SetState(855)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 85, p.GetParserRuleContext())
	}

	return localctx
}

// IUnrecognizedTokenContext is an interface to support dynamic dispatch.
type IUnrecognizedTokenContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnrecognizedTokenContext differentiates from other interfaces.
	IsUnrecognizedTokenContext()
}

type UnrecognizedTokenContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnrecognizedTokenContext() *UnrecognizedTokenContext {
	var p = new(UnrecognizedTokenContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SimplifiedCqlParserRULE_unrecognizedToken
	return p
}

func (*UnrecognizedTokenContext) IsUnrecognizedTokenContext() {}

func NewUnrecognizedTokenContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnrecognizedTokenContext {
	var p = new(UnrecognizedTokenContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SimplifiedCqlParserRULE_unrecognizedToken

	return p
}

func (s *UnrecognizedTokenContext) GetParser() antlr.Parser { return s.parser }
func (s *UnrecognizedTokenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnrecognizedTokenContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnrecognizedTokenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.EnterUnrecognizedToken(s)
	}
}

func (s *UnrecognizedTokenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SimplifiedCqlListener); ok {
		listenerT.ExitUnrecognizedToken(s)
	}
}

func (p *SimplifiedCqlParser) UnrecognizedToken() (localctx IUnrecognizedTokenContext) {
	this := p
	_ = this

	localctx = NewUnrecognizedTokenContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, SimplifiedCqlParserRULE_unrecognizedToken)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(856)
	p.MatchWildcard()

	return localctx
}

func (p *SimplifiedCqlParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 28:
		var t *WhereExpressionContext = nil
		if localctx != nil {
			t = localctx.(*WhereExpressionContext)
		}
		return p.WhereExpression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *SimplifiedCqlParser) WhereExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
